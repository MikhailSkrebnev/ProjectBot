from aiogram import types, F, Router
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from Database.User_db import Database


from Keyboards.admin_keyboards.dv_products_keyboards import(
    open_edit_order
)



from Keyboards.user_keyboards.products_keyboards import(
    edit_delivery_address,
    cancel_edit_delivery_address,
    purchase_dv_kb,
    AddDeliveryAddress,
)


db = Database()
router = Router()



class Edit_Delivery_Address(StatesGroup):
    order_id = State()



# –í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏

@router.callback_query(F.data.startswith('usersaleid_'))
async def process_successful_payment(call: types.CallbackQuery):
    call_data = call.data # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞
    sale_id = call_data.split('_')[1]# –ü–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–¥–∞–∂–∏, —á—Ç–æ–±—ã –≤—ã—Ç–∞—â–∏—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ

    product_data = db.get_sale_data(sale_id=sale_id)

    if product_data[0][1] == 'inf':
        await call.message.edit_text(text='–¢–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã üëá')
        for content in product_data[0][3]:
            content_data = db.get_inf_product_content(content_id=content)

            if content_data[0][3] == 'text':
                await call.message.answer(text=content_data[0][2])
            elif content_data[0][3] == 'video':
                await call.message.answer_video(video=str(content_data[0][2]))
            elif content_data[0][3] == 'voice':
                await call.message.answer_voice(voice=str(content_data[0][2]))
            elif content_data[0][3] == 'photo':
                await call.message.answer_photo(photo=str(content_data[0][2]))
            elif content_data[0][3] == 'document':
                await call.message.answer_document(document=str(content_data[0][2]))
    elif product_data[0][1] == 'channel':
        builder = InlineKeyboardBuilder()

        black_list = '<i>–ï—â–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–∞–º:</i>\n '

        for channel in product_data[0][3]:
            try:
                channel_data = db.get_ch_product_content(content_id=channel) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–µ

                create_link = await call.bot.create_chat_invite_link(chat_id=channel_data[0][3], name='–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞', creates_join_request=True) # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É —Å –∑–∞—è–≤–∫–æ–π –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
                link = create_link.invite_link # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É

                builder.row(types.InlineKeyboardButton(text=f'–ö–∞–Ω–∞–ª: {channel_data[0][2]}', url=link)) # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
            except:
                black_list += f'\n<b>- {channel_data[0][2]}</b>'

        black_list += '\n\n<i>–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–æ—Ä—É!</i>'

        if len(black_list) == 143: # –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ç–æ black_list –ø–æ–∫–∞–∂–µ—Ç –∫ –∫–∞–∫–∏–º –∫–∞–Ω–∞–ª–º –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø
            black_list = ''
        else:
            black_list = black_list

        builder.row(types.InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', callback_data=f'approve_{sale_id}'))
        builder.row(types.InlineKeyboardButton(text='üëà –ù–ê–ó–ê–î', callback_data='call_purchases'))

        await call.message.edit_text(
            text=f'–ü–æ–¥–∞–π –∑–∞—è–≤—É –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É" \n\n{black_list}',
            reply_markup=builder.as_markup()
        )
    elif product_data[0][1] == 'delivery':
        content_data = db.get_dv_product_content(sale_id=sale_id)

        caption = f'''
<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –∑–∞–∫–∞–∑–µ:</b>

<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {content_data[0][0]}

<b>–¢–æ–≤–∞—Ä:</b> {content_data[0][4]}
<b>–ö–æ–ª-–≤–æ:</b> {content_data[0][6]}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –µ–¥. —Ç–æ–≤–∞—Ä–∞:</b> {content_data[0][5]} üá∑üá∫RUB

<b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {content_data[0][7]}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {content_data[0][8]} üá∑üá∫RUB

<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {content_data[0][9]}
<b>–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä:</b> <code>{content_data[0][10]}</code>
<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> {content_data[0][11]}

<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {content_data[0][12]}
'''

        await call.message.edit_text(
            text=caption,
            reply_markup=edit_delivery_address(delivery_order=content_data[0][0]).as_markup()
        )



@router.callback_query(AddDeliveryAddress.filter(F.action == 'add_delivery_address'))
async def call_add_delivery_address(call: types.CallbackQuery, callback_data: AddDeliveryAddress, state: FSMContext):
    order_data = db.get_delivery_data(order_id=callback_data.order_id)

    if order_data[0][11] == '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ':
        await call.message.edit_text(
            text='–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –∞–¥—Ä–µ—Å –ü–í–ó/–ü–ê–°–¢–û–ú–ê–¢–ê',
            reply_markup=cancel_edit_delivery_address().as_markup()
        )
        await state.set_state(Edit_Delivery_Address.order_id)
        await state.update_data(order_id=callback_data.order_id)
    else:
        await call.answer(text='üö´ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω, –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è', show_alert=True)



@router.message(Edit_Delivery_Address.order_id, F.text)
async def get_new_delivery_address(msg: types.Message, state: FSMContext):
    bot_username = await msg.bot.get_me()
    project_id = db.get_project_id(bot_username.username)
    getFSM = await state.get_data()

    if len(msg.text) > 128:
        await msg.answer('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 128 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=cancel_edit_delivery_address().as_markup())
    else:
        db.update_delivery_address(order_id=getFSM.get('order_id'), new_address=msg.text) # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏

        delivery_data = db.get_delivery_data(order_id=getFSM.get('order_id'))

        caption = f'''
<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –∑–∞–∫–∞–∑–µ:</b>

<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {delivery_data[0][0]}

<b>–¢–æ–≤–∞—Ä:</b> {delivery_data[0][4]}
<b>–ö–æ–ª-–≤–æ:</b> {delivery_data[0][6]}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –µ–¥. —Ç–æ–≤–∞—Ä–∞:</b> {delivery_data[0][5]} üá∑üá∫RUB

<b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_data[0][7]}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_data[0][8]} üá∑üá∫RUB

<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_data[0][9]}
<b>–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä:</b> <code>{delivery_data[0][10]}</code>
<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> {delivery_data[0][11]}

<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {delivery_data[0][12]}
'''
        
        await msg.answer(
            text=caption,
            reply_markup=purchase_dv_kb(order_id=delivery_data[0][0]).as_markup()
        )


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –±–æ—Ç–∞
        try:
            await msg.bot.send_message(chat_id=db.who_is_admin(project_id), text=f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Å ID: <code>{delivery_data[0][2]}</code>  –∏–∑–º–µ–Ω–∏–ª –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞: {delivery_data[0][0]}', reply_markup=open_edit_order(order_id=delivery_data[0][0]).as_markup())
        except:
            pass
        

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_state = await state.get_state()

        if current_state is None:
            return
            
        await state.clear()







@router.callback_query(F.data.startswith('approve_'))
async def approve_join_in_channel(call: types.CallbackQuery):
    call_data = call.data # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞
    sale_id = call_data.split('_')[1]# –ü–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–¥–∞–∂–∏, —á—Ç–æ–±—ã –≤—ã—Ç–∞—â–∏—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ

    product_data = db.get_sale_data(sale_id=sale_id)

    try:
        for channel in product_data[0][3]:
                try:
                    channel_data = db.get_ch_product_content(content_id=channel) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–µ
                    await call.bot.approve_chat_join_request(chat_id=channel_data[0][3], user_id=call.from_user.id) # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
                except:
                    pass
    except:
        await call.answer(
            text='–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å',
            show_alert=True
        )

    await call.answer(text='‚úÖ –ó–∞—è–≤–∫–∏ –æ–¥–æ–±—Ä–µ–Ω—ã!', show_alert=True)