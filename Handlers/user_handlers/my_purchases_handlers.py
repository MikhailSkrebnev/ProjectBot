from aiogram import types, F, Router
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext


from Database.User_db import Database



from Keyboards.user_keyboards.products_keyboards import(
    purchases_kb,
    purchase_dv_kb,
    Purchases
)


db = Database()
router = Router()





# –†–∞–∑–¥–µ–ª –ü–û–ö–£–ü–ö–ò

@router.message(F.text == 'üõçÔ∏è –ü–æ–∫—É–ø–∫–∏')
async def button_purchases(msg: types.Message, state: FSMContext):
    bot_username = await msg.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    caption = f'''
<b>–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>
'''
    
    await msg.answer(
        text=caption,
        reply_markup=purchases_kb(project_id=project_id, user_id=msg.from_user.id).as_markup()
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
            
    await state.clear()



@router.callback_query(F.data == 'call_purchases')
async def call_purchases(call: types.CallbackQuery, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    caption = f'''
<b>–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>
'''
    
    await call.message.edit_text(
        text=caption,
        reply_markup=purchases_kb(project_id=project_id, user_id=call.from_user.id).as_markup()
    )   

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
            
    await state.clear()




# –û—Ç–∫—Ä—ã—Ç—å –ø–æ–∫—É–ø–∫—É

@router.callback_query(Purchases.filter(F.action == 'open_purchase'))
async def call_open_purchase(call: types.CallbackQuery, callback_data: Purchases):

    purchase_data = db.get_purchase_data(purchase_id=callback_data.purchase_id)


    if purchase_data[0][8] == 'delivery':
        delivery_data = db.get_delivery_order(sale_id=purchase_data[0][0])

        caption = f'''
<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –∑–∞–∫–∞–∑–µ:</b>

<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {delivery_data[0][0]}

<b>–¢–æ–≤–∞—Ä:</b> {delivery_data[0][4]}
<b>–ö–æ–ª-–≤–æ:</b> {delivery_data[0][6]}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –µ–¥. —Ç–æ–≤–∞—Ä–∞:</b> {delivery_data[0][5]} üá∑üá∫RUB

<b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_data[0][7]}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_data[0][8]} üá∑üá∫RUB

<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_data[0][9]}
<b>–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä:</b> {delivery_data[0][10]}
<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> {delivery_data[0][11]}

<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {delivery_data[0][12]}
'''

        await call.message.edit_text(
            text=caption,
            reply_markup=purchase_dv_kb(order_id=delivery_data[0][0]).as_markup()
        )

    elif purchase_data[0][8] == 'inf':

        for content in db.get_sale_data(sale_id=purchase_data[0][0])[0][3]: # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            content_data = db.get_inf_product_content(content_id=content) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∏–Ω—Ñ–æ–ø—Ä–æ–¥—É–∫—Ç–µ

            try:
                if content_data[0][3] == 'text':
                    await call.message.answer(text=content_data[0][2])
                elif content_data[0][3] == 'video':
                    await call.message.answer_video(video=str(content_data[0][2]))
                elif content_data[0][3] == 'voice':
                    await call.message.answer_voice(voice=str(content_data[0][2]))
                elif content_data[0][3] == 'photo':
                    await call.message.answer_photo(photo=str(content_data[0][2]))
                elif content_data[0][3] == 'document':
                    await call.message.answer_document(document=str(content_data[0][2]))
            except:
                await call.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–¥–∞–≤—Ü—É')

        await call.answer(show_alert=False)

    elif purchase_data[0][8] == 'channel':

        builder = InlineKeyboardBuilder()

        black_list = '<i>–ï—â–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–∞–º:</i>\n '

        for channel in purchase_data[0][9]:
            try:
                channel_data = db.get_ch_product_content(content_id=channel) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–µ

                create_link = await call.bot.create_chat_invite_link(chat_id=channel_data[0][3], name='–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞', creates_join_request=True) # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É —Å –∑–∞—è–≤–∫–æ–π –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
                link = create_link.invite_link # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É

                builder.row(types.InlineKeyboardButton(text=f'–ö–∞–Ω–∞–ª: {channel_data[0][2]}', url=link)) # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
            except:
                try:
                    black_list += f'\n<b>- {channel_data[0][2]}</b>'
                except:
                    black_list += f'\n<b>- –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª</b>'

        black_list += '\n\n<i>–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ä—Ç–æ—Ä—É!</i>'

        if len(black_list) == 143: # –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ç–æ black_list –ø–æ–∫–∞–∂–µ—Ç –∫ –∫–∞–∫–∏–º –∫–∞–Ω–∞–ª–º –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø
            black_list = ''
        else:
            black_list = black_list

        builder.row(types.InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', callback_data=f'approve_{purchase_data[0][0]}'))
        builder.row(types.InlineKeyboardButton(text='üëà –ù–ê–ó–ê–î', callback_data='call_purchases'))

        await call.message.edit_text(
            text=f'–ü–æ–¥–∞–π –∑–∞—è–≤—É –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É" \n\n{black_list}',
            reply_markup=builder.as_markup()
        )


    



  

