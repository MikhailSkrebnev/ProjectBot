from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext


from Database.User_db import Database


from Keyboards.user_keyboards.products_keyboards import(
    counter_kb,
    payment_methods,
    payment_methods_not_delivery,
    choose_delivery_methods_kb,
    delivery_method_kb,
    payment_methods_delivery,
    BuyGoods,
    DVMehtods
)


db = Database()
router = Router()





# –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞

@router.callback_query(BuyGoods.filter(F.action == 'buy_goods'))
async def button_buy_goods(call: types.CallbackQuery, callback_data: BuyGoods, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username.username)

    product_data = db.get_product_data(product_id=callback_data.product_id)

    try: 
        caption = f'''
–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å?

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {product_data[0][6] if product_data[0][7] == 0 else product_data[0][6] - product_data[0][6] / 100 * product_data[0][7]} üá∑üá∫RUB
'''
    except:
        await call.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', show_alert=True)

    if (product_data[0][2] == 'inf' and product_data[0][4]) or product_data[0][2] == 'delivery': # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —è–≤–ª—è–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å
        try:
            await call.message.edit_text(
                text=caption,
                reply_markup=counter_kb(product_id=callback_data.product_id, group_id=callback_data.group_id, quantity='1').as_markup()
            )
        except:
            await call.message.delete()

            await call.message.answer(
                text=caption,
                reply_markup=counter_kb(product_id=callback_data.product_id, group_id=callback_data.group_id, quantity='1').as_markup()
            )
    else: # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        try:
            await call.message.edit_text(
                text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                reply_markup=payment_methods(project_id=project_id, product_id=callback_data.product_id, group_id=callback_data.group_id).as_markup()
            )

            try:
                process_data = db.get_payment_process_data(process_id=callback_data.process)
                if db.get_product_data(product_id=process_data[7])[0][4]:
                    content = db.get_product_contents(product_id=process_data[7]) # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    new_content = process_data[9] + content
                    db.update_list_contents(product_id=process_data[7], content=new_content) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ç–æ–≤–∞—Ä–µ
                    db.delete_process(process_id=callback_data.process) # –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                else:
                    db.plus_quantity_of_goods(product_id=process_data[7], quantity=process_data[10])
                    db.delete_process(process_id=callback_data.process)
            except:
                pass
        except:
            await call.message.delete()

            await call.message.answer(
                text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                reply_markup=payment_methods(project_id=project_id, product_id=callback_data.product_id, group_id=callback_data.group_id).as_markup()
            )

            try:
                process_data = db.get_payment_process_data(process_id=callback_data.process)
                if db.get_product_data(product_id=process_data[7])[0][4]:
                    content = db.get_product_contents(product_id=process_data[7]) # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    new_content = process_data[9] + content
                    db.update_list_contents(product_id=process_data[7], content=new_content) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ç–æ–≤–∞—Ä–µ
                    db.delete_process(process_id=callback_data.process) # –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                else:
                    db.plus_quantity_of_goods(product_id=process_data[7], quantity=process_data[10])
                    db.delete_process(process_id=callback_data.process)
            except:
                pass

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
                                        
    await state.clear()



@router.callback_query(BuyGoods.filter(F.action == 'counter'))
async def button_counter(call: types.CallbackQuery, callback_data: BuyGoods):
    product_data = db.get_product_data(product_id=callback_data.product_id)

    quantity = int(callback_data.quantity)

    try:
        if callback_data.count == 'plus':
            if quantity < product_data[0][11]:
                quantity += 1

                caption = f'''
–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å?

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {round(product_data[0][6] * quantity if product_data[0][7] == 0 else (product_data[0][6] - product_data[0][6] / 100 * product_data[0][7]) * quantity)} üá∑üá∫RUB
    '''
                await call.message.edit_text(
                    text=caption,
                    reply_markup=counter_kb(product_id=callback_data.product_id, group_id=callback_data.group_id, quantity=str(quantity)).as_markup()
                )
            else:
                await call.answer(text='–≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞!')

        elif callback_data.count == 'minus':
            if quantity > 1:
                quantity -= 1

                caption = f'''
–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å?

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {product_data[0][6] * quantity if product_data[0][7] == 0 else (product_data[0][6] - product_data[0][6] / 100 * product_data[0][7]) * quantity} üá∑üá∫RUB
'''
                await call.message.edit_text(
                    text=caption,
                    reply_markup=counter_kb(product_id=callback_data.product_id, group_id=callback_data.group_id, quantity=str(quantity)).as_markup()
                )
            else:
                await call.answer(text='–ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –º–µ–Ω—å—à–µ 1 –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞!')
        elif callback_data.count == 'none':
            caption = f'''
–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å?

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {product_data[0][6] * quantity if product_data[0][7] == 0 else (product_data[0][6] - product_data[0][6] / 100 * product_data[0][7]) * quantity} üá∑üá∫RUB
    '''
            await call.message.edit_text(
                text=caption,
                reply_markup=counter_kb(product_id=callback_data.product_id, group_id=callback_data.group_id, quantity=str(quantity)).as_markup()
            )
        else:
            await call.answer(show_alert=True)
    except:
        await call.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî', show_alert=True)



# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

@router.callback_query(BuyGoods.filter(F.action == 'choose_delivery_method'))
async def button_choose_delivery_methods(call: types.CallbackQuery, callback_data: BuyGoods):

    await call.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:',
        reply_markup=choose_delivery_methods_kb(product_id=callback_data.product_id, group_id=callback_data.group_id, quantity=callback_data.quantity).as_markup()
    )


@router.callback_query(DVMehtods.filter(F.action == 'open_DVmethod'))
async def button_open_DVmethod(call: types.CallbackQuery, callback_data: DVMehtods):

    dv_method_data = db.get_delivery_method_data(method_id=callback_data.method_id)

    caption = f'''
<b>{dv_method_data[0][2]}</b>

{dv_method_data[0][3]}

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {dv_method_data[0][4]} üá∑üá∫RUB
'''

    await call.message.edit_text(
        text=caption,
        reply_markup=delivery_method_kb(product_id=callback_data.product_id, group_id=callback_data.group_id, quantity=callback_data.quantity, method_id=dv_method_data[0][0]).as_markup()
    )


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ë–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏)

@router.callback_query(BuyGoods.filter(F.action == 'buy_goods_not_delivery'))
async def button_buy_goods_not_delivery(call: types.CallbackQuery, callback_data: BuyGoods, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    await call.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
        reply_markup=payment_methods_not_delivery(project_id=project_id, product_id=callback_data.product_id, group_id=callback_data.group_id, quantity=callback_data.quantity).as_markup()
    )
    
    try:
        process_data = db.get_payment_process_data(process_id=callback_data.process)
        if db.get_product_data(product_id=process_data[7])[0][4]:
            content = db.get_product_contents(product_id=process_data[7]) # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            new_content = process_data[9] + content
            db.update_list_contents(product_id=process_data[7], content=new_content) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ç–æ–≤–∞—Ä–µ
            db.delete_process(process_id=callback_data.process) # –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        else:
            db.plus_quantity_of_goods(product_id=process_data[7], quantity=process_data[10])
            db.delete_process(process_id=callback_data.process)
    except:
        pass

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
                                        
    await state.clear()


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–° –¥–æ—Å—Ç–∞–≤–∫–æ–π)

@router.callback_query(BuyGoods.filter(F.action == 'buy_goods_delivery'))
async def button_buy_goods_delivery(call: types.CallbackQuery, callback_data: BuyGoods, state:FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    await call.message.edit_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
        reply_markup=payment_methods_delivery(project_id=project_id, product_id=callback_data.product_id, group_id=callback_data.group_id, quantity=callback_data.quantity, method_id=callback_data.count).as_markup()
    )
    try:
        process_data = db.get_payment_process_data(process_id=callback_data.process)
        if db.get_product_data(product_id=process_data[7])[0][4]:
            content = db.get_product_contents(product_id=process_data[7]) # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            new_content = process_data[9] + content
            db.update_list_contents(product_id=process_data[7], content=new_content) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ç–æ–≤–∞—Ä–µ
            db.delete_process(process_id=callback_data.process) # –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        else:
            db.plus_quantity_of_goods(product_id=process_data[7], quantity=process_data[10])
            db.delete_process(process_id=callback_data.process)
    except:
        pass

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
                                        
    await state.clear()