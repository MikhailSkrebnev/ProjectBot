import asyncio
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State


from datetime import date, datetime
import time
from random import randint

from Database.User_db import Database
import random

from Lib_payment import(
    Payment
)


from Keyboards.user_keyboards.products_keyboards import(
    payment_for_goods_kb,
    back_to_menu_kb,
    proof_payment_kb,
    receive_paid_goods_kb,
    cancel_send_proof,
    PaymentForGoods
)


db = Database()
router = Router()



def discount_calculation(price, discount):
    total_price = price - price / 100 * discount
    text = '<s>' + str(price)+'</s> ' + str(round(total_price))
    return text

def discount_cal(price, discount):
    total_price = price - price / 100 * discount
    return total_price


class Proof_Payment(StatesGroup):
    process_id = State()



# –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É

@router.callback_query(PaymentForGoods.filter(F.action == 'payment_for_goods'))
async def button_payment_for_goods(call: types.CallbackQuery, callback_data: PaymentForGoods, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    payment_method_data = db.get_payment_method_data(method_id=callback_data.payment_method_id)

    if callback_data.delivery_method_id != 'none':
        delivery_method_data = db.get_delivery_method_data(method_id=callback_data.delivery_method_id)
    else:
        delivery_method_data = ['none']

    if callback_data.quantity == 'none': # —Ç–∞–∫ –∫–∞–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∏–±–∏—Ä–∞–µ—Ç –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞, —Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–æ–ª-–≤–æ 1
        quantity = 1
    else:
        quantity = int(callback_data.quantity)

    product_data = db.get_product_data(product_id=callback_data.product_id)


    # (payment_method_data != []) and (db.check_status_sub(project_id=project_id)[0][0] != 0) –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –æ–ø–ª–∞—á–µ–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞

    if payment_method_data != []: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –æ–ø–ª–∞—á–µ–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞
        if product_data != []: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–∞–º —Ç–æ–≤–∞—Ä
            if db.check_quantity_product(product_id=callback_data.product_id, quantity=quantity) != []: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω–æ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞
                if delivery_method_data != []: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –µ—â–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ–≤–∞—Ä —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π

                    if product_data[0][2] != 'delivery':
                        total_price = round((product_data[0][6] if product_data[0][7] == 0 else discount_cal(price=product_data[0][6], discount=product_data[0][7])) * quantity)
                    else:
                        total_price = round((product_data[0][6] if product_data[0][7] == 0 else discount_cal(price=product_data[0][6], discount=product_data[0][7])) * quantity + delivery_method_data[0][4])

                    if product_data[0][2] == 'inf' or product_data[0][2] == 'channel': # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª(—ã)
                        if product_data[0][4]: # –ï—Å–ª–∏ –∫–∞–∂–¥–∞—è –µ–¥–µ–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è, —Ç–æ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                            content = db.get_product_contents(product_id=product_data[0][0]) # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                            db.update_list_contents(product_id=product_data[0][0], content=content[quantity:]) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ç–æ–≤–∞—Ä–µ
                            contents = content[:quantity] # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞
                        else:
                            contents = db.get_product_contents(product_id=product_data[0][0]) # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –∏–Ω—Ñ–æ-—Ç–æ–≤–∞—Ä —Å –Ω–µ—É–Ω–∏–∫–∞–ª—å–Ω–æ–π –µ–¥–µ–Ω–∏—Ü–æ–π —Ç–æ–≤–∞—Ä–∞
                    else:
                        contents = [delivery_method_data[0][0]] # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–≤–∞—Ä —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, —Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏

                    if payment_method_data[0][2] == 'auto_CryptoBot': # –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è –ö—Ä–∏–ø—Ç–æ–±–æ—Ç–∞
                        payment_data = Payment.create_cryptobot_invoice(token=f'{payment_method_data[0][6]}', amount=total_price) # –°–æ–∑–¥–∞–ª–∏ —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É

                        link = payment_data['result']['pay_url']
                        payment_id = payment_data['result']['invoice_id']
                        payment_method = 'auto_CryptoBot'

                    elif payment_method_data[0][2] == 'auto_WalletPay': # –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è Wallet
                        current_time = time.localtime()
                        current_day = date.today()
                        externalId = f'{call.from_user.id}:{product_data[0][0]}:{current_day}_{time.strftime("%H:%M:%S", current_time)}'
                        payment_data = Payment.create_wallet_invoice(token= f'{payment_method_data[0][6]}', amount=total_price, description=f'–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞ {product_data[0][8]}', user_id=call.from_user.id, externalId=externalId) # –°–æ–∑–¥–∞–ª–∏ —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
                        
                        link = payment_data['data']['payLink']
                        payment_id = payment_data['data']['id']
                        payment_method = 'auto_WalletPay'

                    elif payment_method_data[0][2] == 'auto_Yoomoney': # –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è Yoomoney
                        bot_username = await call.bot.get_me()
                        redirect_url = f'https://t.me/{bot_username.username}'

                        payment_id = f'{call.message.from_user.id}:{str(random.randint(0, 10000000000))}'

                        link = f'https://yoomoney.ru/quickpay/confirm?receiver={payment_method_data[0][7]}&quickpay-form=button&paymentType=AC&sum={total_price}&label={payment_id}&successURL={redirect_url}'
                        payment_method = 'auto_Yoomoney'
                        
                    else: # –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è –†—É—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
                        link = 'none'
                        payment_id = randint(0, 999999999)
                        payment_method = 'manual'
                

                    caption = f'''
<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {payment_method_data[0][4]}

{payment_method_data[0][5]}

<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_price} üá∑üá∫RUB

‚ö†Ô∏è <i>—É –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Ç–æ–≤–∞—Ä–∞</i>
'''
                    
                    if link == []: # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ç–æ–∫–µ–Ω–æ–º
                        await call.answer(text='–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!', show_alert=True)
                    else:
                        db.minus_quantity_of_goods(product_id=product_data[0][0], quantity=quantity)
                        db.add_new_payment_processing( # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ —Å–∏—Å—Ç–µ–º—É –∏ —Å—Ç–∞–≤–∏–º –≤ —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
                            project_id=product_data[0][1],
                            user_id=call.from_user.id,
                            payment_id=payment_id,
                            payment_method_id=payment_method_data[0][0],
                            payment_method_type=payment_method,
                            product_id=product_data[0][0],
                            product_price=total_price,
                            contents=contents,
                            product_quantity=quantity,
                            message_id=0
                        )
                        message_id = await call.message.edit_text(
                                text=caption,
                                reply_markup=payment_for_goods_kb(
                                    product_id=callback_data.product_id,
                                    group_id=callback_data.group_id,
                                    quantity=callback_data.quantity,
                                    delivery_method_id=callback_data.delivery_method_id,
                                    payment_method_id=callback_data.payment_method_id,
                                    url=f'{link}',
                                    process_id=db.get_last_process_id(user_id=call.from_user.id, product_id=callback_data.product_id)
                                ).as_markup()
                            )
                        
                        process_id = db.get_last_process_id(user_id=call.from_user.id, product_id=callback_data.product_id)
                        
                        await state.update_data(process_id=process_id)
                        
                        db.update_message_id(message_id=message_id.message_id, process_id=process_id)
                        
                    await asyncio.sleep(1800) # –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∏ —Å—á–µ—Ç –æ–ø–ª–∞—Ç—ã —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ë–î
                    try:
                        if db.get_payment_process_data(process_id=process_id)[11] != 0: # –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã. –ï—Å–ª–∏ message_id = 0 - –∑–Ω–∞—á–∏—Ç –ø–ª–∞—Ç–µ–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
                            try:
                                if product_data[0][4]: # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
                                    content = db.get_product_contents(product_id=product_data[0][0]) # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ç–æ–≤–∞—Ä–µ
                                    new_content = contents + content # –ü—Ä–∏–±–∞–≤–ª—è–µ–º —Ç–æ —á—Ç–æ –∑–∞–±–∏—Ä–∞–ª–∏ —Ä–∞–Ω–µ–µ
                                    db.update_list_contents(product_id=product_data[0][0], content=new_content) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ç–æ–≤–∞—Ä–µ

                                db.delete_process(process_id=db.get_last_process_id(user_id=call.from_user.id, product_id=callback_data.product_id))
                                db.plus_quantity_of_goods(product_id=product_data[0][0], quantity=quantity)
                                await call.message.edit_text(
                                    text='–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫!\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω –∏ –æ—Ñ–æ—Ä–º–∏ –ø–æ–∫—É–ø–∫—É –∑–∞–Ω–æ–≤–æ',
                                    reply_markup=back_to_menu_kb()
                                )

                                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                                current_state = await state.get_state()

                                if current_state is None:
                                    return
                                        
                                await state.clear()
                            except:
                                pass
                    except:
                        pass
                else:
                    await call.answer(
                        text='–†–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                        show_alert=True
                    )
            else:
                await call.answer(
                    text='–¢–æ–≤–∞—Ä –≤ –Ω—É–∂–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è',
                    show_alert=True
                )
        else:
            await call.answer(
                text='–ü—Ä–æ–¥—É–∫—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏',
                show_alert=True
            )
    else:
        await call.answer(
            text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã',
            show_alert=True
        )


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ, –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Å–ø–æ—Å–æ–±–µ –æ–ø–ª–∞—Ç—ã 

@router.callback_query(F.data == 'proof_of_payment')
async def call_proof_of_payment(call: types.CallbackQuery, state: FSMContext):

    await call.message.edit_text(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. üì∏ –°–ø–∞—Å–∏–±–æ! üòä'
    )

    await state.set_state(Proof_Payment.process_id)


# –ü–æ–ª—É—á–∞–µ–º —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ

@router.message(Proof_Payment.process_id)
async def get_proof_of_payment(msg: types.Message, state: FSMContext):
    bot_username = await msg.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)
    getFSM = await state.get_data()

    if msg.content_type == types.ContentType.PHOTO:
        process_data = db.get_payment_process_data(process_id=getFSM.get('process_id'))
        product_data = db.get_sale_product_data(product_id=process_data[7])
        payment_data = db.get_payment_method(method_id=process_data[5])
        user_data = db.check_reg_user(project_id=project_id, user_id=process_data[3])

        db.update_message_id(message_id=0, process_id=getFSM.get('process_id'))


        if product_data[0][2] == 'channel':
            product_type = "–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª"
        elif product_data[0][2] == 'delivery':
            product_type = "—Ç–æ–≤–∞—Ä —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"
            delivery_data = db.delivery_method_data(method_id=product_data[0][5][0])
        else:
            product_type = "–∏–Ω—Ñ–æ-—Ç–æ–≤–∞—Ä"

        caption = f'''
üí∞ <b>–ü–†–ò–®–ï–õ –ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ</b>

<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> <code>{user_data[0][3]}</code>
<b>* ID:</b> <code>{user_data[0][1]}</code>
<b>* USERNAME:</b> {"<code>" + "@" + user_data[0][4] + "</code>" if {user_data[0][3]} != "None" else "–Ω–µ —É–∫–∞–∑–∞–Ω"}

<b>–¢–æ–≤–∞—Ä:</b> {product_data[0][8]} ({product_type})
<b>–ö–æ–ª-–≤–æ:</b> {process_data[10]} 
{"<b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: </b>" + delivery_data[0][2] if product_data[0][2] == "delivery" else ""}
<b>–ö –æ–ø–ª–∞—Ç–µ:</b> {process_data[8]} üá∑üá∫ RUB
<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {payment_data[0][4]}
'''

        try:
            await msg.bot.send_photo(
                    chat_id=db.who_is_admin(project_id=process_data[2]), 
                    photo=msg.photo[-1].file_id, 
                    caption=caption,
                    reply_markup=proof_payment_kb(process_id=process_data[0]).as_markup()
                )

            await msg.answer(
                    text='–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ. ‚è≥ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç, –º—ã —Ç–µ–±—è —É–≤–µ–¥–æ–º–∏–º. üì©'
                )
        except:
            await msg.answer(
                text='–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–≤–æ–π –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ–¥–∞–≤—Ü—É. üòî –°–≤—è–∂–∏—Å—å —Å –Ω–∏–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞! üìû'
            )


        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_state = await state.get_state()

        if current_state is None:
            return
                
        await state.clear()
    else:
        await msg.answer(
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. üì∏ –°–ø–∞—Å–∏–±–æ! üòä',
            reply_markup=cancel_send_proof()
        )




@router.callback_query(F.data.startswith('confirmpayment_'))
async def call_confirm_payment(call: types.CallbackQuery):
    call_data = call.data # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞
    process_id = call_data.split('_')[1]# –ü–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–¥–∞–∂–∏, —á—Ç–æ–±—ã –≤—ã—Ç–∞—â–∏—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ

    process_data = db.get_payment_process_data(process_id=process_id)
    product_data = db.get_sale_product_data(process_data[7])

    now = datetime.now() 
    time = now.strftime("%H:%M:%S")

    await call.message.edit_caption(
        caption=f'<b>‚úÖ –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n<b>ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b> <code>{process_data[3]}</code>\n<b>–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã:</b> {process_data[8]} RUB',
        reply_markup=None
    )

    db.add_new_sale( # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–¥–∞–∂—É
              project_id=process_data[2],
              sale_date=date.today(),
              sale_time=time,
              user_id=process_data[3],
              payment_method=process_data[6],
              product_id=process_data[7],
              product_name=f'{product_data[0][8]}',
              product_type=f'{product_data[0][2]}',
              product_content=process_data[9] if product_data[0][2] != 'delivery' else '',
              quantity=process_data[11],
              product_price=process_data[8]
          )
    
    db.update_sales_product(product_id=process_data[7]) # –î–æ–±–∞–≤–ª—è–µ–º 1 –ø—Ä–æ–¥–∞–∂—É –∫ —Ç–æ–≤–∞—Ä—É
    db.delete_process(process_id=db.get_last_process_id(user_id=process_data[3], product_id=process_data[7])) # –£–¥–∞–ª—è–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏–∑ –ë–î
    sale_id = db.get_last_sale_user(user_id=process_data[3], product_id=process_data[7])[0][0] # –ü–æ–ª—É—á–∞–µ–º sale_id –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –∫–æ–ª–ª–±—ç–∫
    delivery_data = db.delivery_method_data(method_id=process_data[9][0])


    if product_data[0][2] == 'delivery': # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            db.add_new_delivery_order(
               sale_id=sale_id,
               user_id=process_data[3],
               project_id=product_data[0][1],
               product_name=product_data[0][8],
               product_price=product_data[0][6],
               product_quantity=process_data[10],
               delivery_method=delivery_data[0][2],
               delivery_price=delivery_data[0][4]
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –∫–ª–∏–µ–Ω—Ç—É
    try:

        caption_user = f'''
{db.get_after_payment_caption(project_id=process_data[3])[0][0]}

<i>–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä</i>
  '''

        await call.bot.send_message(
            chat_id=process_data[3],
            text=caption_user,
            reply_markup=receive_paid_goods_kb(sale_id=sale_id).as_markup()
        )
    except:
        pass


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ –∞–¥–º–∏–Ω—É

    user_data = db.get_user_data(user_id=process_data[3], project_id=process_data[2]) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
    payment_data = db.get_payment_method(method_id=process_data[5])

    caption_admin = f'''
<b>üí∞ –ù–û–í–ê–Ø –ü–†–û–î–ê–ñ–ê!</b>

<b>–¢–æ–≤–∞—Ä:</b> {product_data[0][8]} 
<b>–ü—Ä–∏–±—ã–ª—å:</b> {process_data[8]} üá∑üá∫ RUB


<b>–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b>
<b>üîπ ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b> {process_data[3]}
<b>üîπ Username:</b> {'@' + str(user_data[0][4]) if user_data[0][4] != 'None' else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
<b>üîπ Fullname –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b> {user_data[0][3]}
<b>üîπ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_data[0][1]} {user_data[0][2]}
<b>üîπ –ö–æ–ª-–≤–æ –ø–æ–∫—É–ø–æ–∫:</b> {user_data[0][5]}
<b>üîπ –°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫:</b> {user_data[0][6]} üá∑üá∫ RUB
<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {payment_data[0][4]}

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –Ω–æ–≤–æ–π –ø—Ä–æ–¥–∞–∂–µ–π! üéâ
'''

    await call.bot.send_message(
        chat_id=db.who_is_admin(process_data[2]),
        text=caption_admin
    )


@router.callback_query(F.data.startswith('rejectpayment_'))
async def call_confirm_payment(call: types.CallbackQuery):
    call_data = call.data # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞
    process_id = call_data.split('_')[1]# –ü–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–¥–∞–∂–∏, —á—Ç–æ–±—ã –≤—ã—Ç–∞—â–∏—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ

    await call.message.edit_caption(
        caption='<b>‚õîÔ∏è –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω!</b>',
        reply_markup=None
    )

    try:
        process_data = db.get_payment_process_data(process_id=process_id)
        if db.get_product_data(product_id=process_data[7])[0][4]:
            content = db.get_product_contents(product_id=process_data[7]) # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            new_content = process_data[9] + content
            db.update_list_contents(product_id=process_data[7], content=new_content) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Ç–æ–≤–∞—Ä–µ
            db.delete_process(process_id=process_id) # –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        else:
            db.plus_quantity_of_goods(product_id=process_data[7], quantity=process_data[10])
            db.delete_process(process_id=process_id)
    except:
        pass


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    try:

        caption_user = '''
<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –æ–ø–ª–∞—Ç—ã üö´</b>

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç—ë–∂ –Ω–µ –ø—Ä–æ—à—ë–ª.

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</i>
  '''

        await call.bot.send_message(
            chat_id=process_data[3],
            text=caption_user,
        )
    except:
        pass
