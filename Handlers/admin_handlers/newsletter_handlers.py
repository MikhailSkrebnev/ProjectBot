from aiogram import types, F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command


from Database.Admin_db import Database


from Keyboards.admin_keyboards.newsletter_keyboards import(
    newsletter_kb,
    cancel_create_newsletter,
    send_newsletter_kb,
    return_newsletter
)

router = Router()
db = Database()


class Create_Newsletter(StatesGroup):
    newsletter_content = State()
    newsletter_caption = State()
    newsletter_type = State()


@router.callback_query(F.data == 'newsletter')
async def call_newsletter(call: types.CallbackQuery, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    newsletter_data = db.get_statistic_newsletter(project_id=project_id)

    caption = f'''
<b>üíå –î–µ–ª–∏—Å—å –Ω–æ–≤–æ—Å—Ç—è–º–∏, –∞–∫—Ü–∏—è–º–∏ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–π —Ä–µ–∫–ª–∞–º—É! üòâ</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {newsletter_data[0][0]}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {newsletter_data[0][1]}

<i>üìä –î–∞–Ω–Ω—ã–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏</i>
'''
    try:
        await call.message.edit_text(
            text=caption,
            reply_markup=newsletter_kb().as_markup()
        )
    except:
        await call.message.delete()
        await call.message.answer(
            text=caption,
            reply_markup=newsletter_kb().as_markup()
        )

    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()



@router.callback_query(F.data == 'create_newsletter')
async def call_create_newsletter(call: types.CallbackQuery, state: FSMContext):

    caption = '''
–° –∫–∞–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?
'''
    
    try:
        await call.message.edit_text(
            text= caption,
            reply_markup=cancel_create_newsletter().as_markup()
        )
    except:
        await call.message.delete()
        await call.message.answer(
            text= caption,
            reply_markup=cancel_create_newsletter().as_markup()
        )
    await state.set_state(Create_Newsletter.newsletter_content)



@router.message(Create_Newsletter.newsletter_content)
async def get_content_newsletter(msg: types.Message, state: FSMContext):

    if msg.content_type == types.ContentType.TEXT:
        await msg.answer(
            text=str(msg.html_text),
            reply_markup=send_newsletter_kb().as_markup()
        )
        await state.update_data(newsletter_type='text')
        await state.update_data(newsletter_content=str(msg.html_text))
    elif msg.content_type == types.ContentType.PHOTO:
        photo = msg.photo[-1].file_id
        caption = msg.caption

        await msg.answer_photo(
            photo=photo,
            caption=caption,
            reply_markup=send_newsletter_kb().as_markup()
        )
        await state.update_data(newsletter_type='photo')
        await state.update_data(newsletter_content=photo)
        await state.update_data(newsletter_caption=caption)
    elif msg.content_type == types.ContentType.VIDEO:
        video = msg.video.file_id
        caption = msg.caption

        await msg.answer_video(
            video=video,
            caption=caption,
            reply_markup=send_newsletter_kb().as_markup()
        )
        await state.update_data(newsletter_type='video')
        await state.update_data(newsletter_content=video)
        await state.update_data(newsletter_caption=caption)
    else:
        await msg.answer(
            text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. üòî\n\n–ü—Ä–∏—à–ª–∏ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ <b>üö´ –û–¢–ú–ï–ù–ê</b>',
            reply_markup=cancel_create_newsletter().as_markup()
        )



@router.callback_query(F.data == 'send_newsletter')
async def call_send_newsletter(call: types.CallbackQuery, state: FSMContext):
    getFSM = await state.get_data()

    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    newsletter_type = getFSM.get('newsletter_type')
    newsletter_content = getFSM.get('newsletter_content')
    newsletter_caption = getFSM.get('newsletter_caption')
    
    done = 0
    block = 0

    caption = '''
<b>–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞! üì§</b>

–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ! üòä
'''

    try:
        sent_message = await call.message.edit_text(
            text=caption
        )
    except:
        await call.message.delete()
        sent_message = await call.message.answer(
            text=caption
        )

    if newsletter_type == 'text':
        for user in db.get_list_users(project_id=project_id):
            try:
                await call.bot.send_message(chat_id=user[1], text=newsletter_content)
                db.update_status_user_client(user_id=user[0], status='true')
                done += 1
            except:
                db.update_status_user_client(user_id=user[0], status='false')
                block += 1
    elif newsletter_type == 'photo':
        for user in db.get_list_users(project_id=project_id):
            try:
                await call.bot.send_photo(chat_id=user[1], photo=newsletter_content, caption=newsletter_caption)
                db.update_status_user_client(user_id=user[0], status='true')
                done += 1
            except:
                db.update_status_user_client(user_id=user[0], status='false')
                block += 1
    elif newsletter_type == 'video':
        for user in db.get_list_users(project_id=project_id):
            try:
                await call.bot.send_video(chat_id=user[1], video=newsletter_content, caption=newsletter_caption)
                db.update_status_user_client(user_id=user[0], status='true')
                done += 1
            except:
                db.update_status_user_client(user_id=user[0], status='false')
                block += 1

    caption = f'''
<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üì§‚úÖ</b>


<b>üìä –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ</b>
----------------
<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {done + block} üë•
<b>–ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> {done} üì©
<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞:</b> {block} üö´
'''

    await call.bot.edit_message_text(
        chat_id=call.from_user.id,
        message_id=sent_message.message_id,
        text=caption,
        reply_markup=return_newsletter().as_markup()
    )

    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()
    

