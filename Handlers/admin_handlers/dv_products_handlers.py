from aiogram import types, F, Router
from aiogram.filters import or_f
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import create_start_link


from Database.Admin_db import Database


from Keyboards.admin_keyboards.dv_products_keyboards import(
    user_products_dv_kb,
    cancel_add_product_dv,
    product_delivery_kb,
    choose_list_delivery,
    user_methods_dv_kb,
    cancel_add_method_dv,
    method_delivery_kb,
    cancel_edit_product,
    delete_product_dv,
    return_product_dv_kb,
    cancel_edit_method_dv,
    delete_method_dv,
    return_edit_method_dv,
    edit_pictures_dv,
    cancel_add_picture,
    return_list_picture,
    picture_dv_kb,
    choose_orders,
    list_delivery_orders,
    order_kb,
    edit_order_status,
    cancel_edit_order_data,
    return_order_data,
    edit_choose_list_delivery,
    return_list_products_dv,
    Paginator,
    ListMethodsDv,
    ListProductsDv,
    ChooseMethodDV,
    EditProducrDV,
    EditMethodDV,
    ListPicturesDv,
    DeliveryOrders,
    EditDeliveryOrder,
    PaginatorOrders
)


db = Database()
router = Router()


class Add_Product_dv(StatesGroup):
    project_id_dv = State()
    product_name_dv = State()
    product_description_dv = State()
    product_price_dv = State()
    product_methods = State()
    product_id_dv = State()


class Add_Delivery_method(StatesGroup):
    method_name = State()
    method_description = State()
    method_price = State()



class Edit_Product_DV(StatesGroup):
    edit_product_dv = State()
    product_id = State()
    what_to_edit = State()    

class Edit_Method_DV(StatesGroup):
    edit_method_dv = State()
    method_id = State()


class Edit_Order_DV(StatesGroup):
    action = State()
    order_id = State()



@router.callback_query(F.data == 'delivery_products')
async def call_products_delivery(call: types.CallbackQuery):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)


    caption = '''
<b>–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>
'''

    await call.message.edit_text(
        text=caption,
        reply_markup=user_products_dv_kb(project_id=project_id, page=0).as_markup()
    )




# PAGINATOR of Products_dv

@router.callback_query(Paginator.filter(F.array_name == 'products_dv'))
async def paginator_products_delivery(call: types.CallbackQuery, state: FSMContext, callback_data: Paginator):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    button = callback_data.button
    page = int(callback_data.page)
    max_pages = int(callback_data.max_pages)

    caption = '''
<b>–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>
'''

    if button == 'next':
        if page < max_pages-1:
            page += 1
            await call.message.edit_text(
                text=caption,
                reply_markup=user_products_dv_kb(project_id=project_id, page=page).as_markup()
            )
        else:
            await call.answer(text='–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    else:
        if page > 0:
            page -= 1
            await call.message.edit_text(
                text=caption,
                reply_markup=user_products_dv_kb(project_id=project_id, page=page).as_markup()
            )
        else:
            await call.answer(text='–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()




# OPEN PRODUCT (DELIVERY)

@router.callback_query(ListProductsDv.filter(F.action == 'open_product_dv'))
async def open_product_channel(call: types.CallbackQuery, callback_data: ListProductsDv, state: FSMContext):
    product_data = db.get_product_data(product_id=callback_data.product_id)

    link = await create_start_link(call.bot, f'{product_data[0][0]}', encode=True)
    total_price = product_data[0][6]

    if product_data[0][7] > 0:
        total_price = total_price - total_price / 100 * product_data[0][7]

    caption = f'''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][8]}
<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][9]}

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][6]} üá∑üá∫RUB
<b>–°–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {product_data[0][7]}%
<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {round(total_price)} üá∑üá∫RUB

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][11]}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:</b> {product_data[0][13]}

<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {link}
'''
    await call.message.edit_text(
        text=caption,
        reply_markup=product_delivery_kb(product_id=product_data[0][0]).as_markup()
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()
   



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

@router.callback_query(ListProductsDv.filter(F.action == 'add_new_product_dv'))
async def add_new_product_dv(call: types.CallbackQuery, callback_data: ListProductsDv, state: FSMContext):

    if db.get_list_delivery_methods(project_id=callback_data.project_id) != []:
        await call.message.edit_text('–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–≤–æ–π —Ç–æ–≤–∞—Ä?', reply_markup=cancel_add_product_dv().as_markup())

        await state.set_state(Add_Product_dv.product_name_dv)
        await state.update_data(project_id_dv=callback_data.project_id)
    else:
        await call.answer(
            text='–î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã 1 —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ üòâ',
            show_alert=True
        )




@router.message(Add_Product_dv.product_name_dv, F.text)
async def get_product_name_dv(msg: types.Message, state: FSMContext):

    if len(msg.text) > 24:
        await msg.answer('–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=cancel_add_product_dv().as_markup())
    else:
        await msg.answer('–ö–∞–∫–æ–µ –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞?', reply_markup=cancel_add_product_dv().as_markup())

        await state.set_state(Add_Product_dv.product_description_dv)
        await state.update_data(product_name_dv=msg.text)


@router.message(Add_Product_dv.product_description_dv, F.text)
async def get_product_description_dv(msg: types.Message, state: FSMContext):

    if len(msg.text) > 1024:
        await msg.answer(text='–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=cancel_add_product_dv().as_markup())
    else:
        await msg.answer('–ö–∞–∫–∞—è –±—É–¥–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞?', reply_markup=cancel_add_product_dv().as_markup())
        await state.set_state(Add_Product_dv.product_price_dv)
        await state.update_data(product_description_dv=msg.html_text)


@router.message(Add_Product_dv.product_price_dv, F.text)
async def get_product_price_dv(msg: types.Message, state: FSMContext):

    if msg.text.isdigit() and int(msg.text) > 0:   
        getFSM = await state.get_data()

        await state.update_data(product_price=msg.text)
        await state.set_state(Add_Product_dv.product_methods)

        selected = [] # –ó–∞–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
        await state.update_data(product_methods=selected)

        await msg.answer('–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=choose_list_delivery(project_id=getFSM.get('project_id_dv'), page=0, selected=selected).as_markup())

    else:
        await msg.answer('–ü—Ä–∏—à–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 RUB üòâ', reply_markup=cancel_add_product_dv().as_markup())


@router.callback_query(Add_Product_dv.product_methods, ChooseMethodDV.filter(F.action == 'choose_method'))
async def get_product_dv_methods(call: types.CallbackQuery, state: FSMContext, callback_data: ChooseMethodDV):
    getFSM = await state.get_data()
    
    # --------------- –ó–¥–µ—Å—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    selected = getFSM.get('product_methods')
    if callback_data.method_id in selected:
        selected.remove(f'{callback_data.method_id}')
    else:
        selected.append(callback_data.method_id)
    await state.update_data(product_methods=selected)
    # ---------------

    await call.message.edit_text(
        text='<b>–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b>', 
        reply_markup=choose_list_delivery(project_id=getFSM.get('project_id_dv'), selected=selected, page=callback_data.page).as_markup()
    )


# –ü–∞–≥–∏–Ω–∞—Ç–æ—Ä

@router.callback_query(Paginator.filter(F.array_name == 'method_of_choice'))
async def paginator_methods_of_choice(call: types.CallbackQuery, callback_data: Paginator, state: FSMContext):
    getFSM = await state.get_data()
    selected = getFSM.get('product_methods')

    button = callback_data.button
    page = int(callback_data.page)
    max_pages = int(callback_data.max_pages)


    if button == 'next':
        if page < max_pages-1:
            page += 1
            await call.message.edit_text('–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=choose_list_delivery(project_id=getFSM.get('project_id_dv'), page=page, selected=selected).as_markup())
        else:
            await call.answer(text='–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    else:
        if page > 0:
            page -= 1
            await call.message.edit_text('–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=choose_list_delivery(project_id=getFSM.get('project_id_dv'), page=page, selected=selected).as_markup())
        else:
            await call.answer(text='–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')


@router.callback_query(Add_Product_dv.product_methods, F.data == 'choice_delivery_methods')
async def produc_created(call: types.CallbackQuery, state: FSMContext):
    getFSM = await state.get_data()

    if getFSM.get('product_methods') == []:
        await call.answer('–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏üôè', show_alert=True)
    else:
        db.add_product(
            project_id=getFSM.get('project_id_dv'),
            product_type='delivery',
            reusable='False',
            product_name=getFSM.get('product_name_dv'),
            product_description=getFSM.get('product_description_dv'),
            product_price=getFSM.get('product_price'),
            contents=getFSM.get('product_methods'),
            product_photo=[]
        )
        product_data = db.get_last_product(project_id=getFSM.get('project_id_dv'), product_type='delivery')

        link = await create_start_link(call.bot, f'{product_data[0][0]}', encode=True)
        total_price = product_data[0][6]

        if product_data[0][7] > 0:
            total_price = total_price - total_price / 100 * product_data[0][7]

        caption = f'''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][8]}
<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][9]}

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][6]} üá∑üá∫RUB
<b>–°–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {product_data[0][7]}%
<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {round(total_price)} üá∑üá∫RUB

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][11]}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:</b> {product_data[0][13]}

<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {link}
'''
        await call.message.edit_text(
            text=caption,
            reply_markup=product_delivery_kb(product_id=product_data[0][0]).as_markup()
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_state = await state.get_state()

        if current_state is None:
            return
            
        await state.clear()




# -------------------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

class Edit_DV_mehotds(StatesGroup):
    new_dv_methods_list = State()



@router.callback_query(EditProducrDV.filter(F.action == 'edit_product_dv'))
async def call_edit_product_dv(call: types.CallbackQuery, callback_data: EditProducrDV, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)
    await state.update_data(product_id=callback_data.product_id)


    if callback_data.what_to_edit == 'product_name':
        await state.set_state(Edit_Product_DV.edit_product_dv)
        await state.update_data(what_to_edit='product_name_dv')
        await call.message.edit_text('–ö–∞–∫–æ–µ –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞?', reply_markup=cancel_edit_product(product_id=callback_data.product_id).as_markup())


    elif callback_data.what_to_edit == 'product_photo':
        caption = '''
üì∏ <b>–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!</b>

üñºÔ∏è –Ø—Ä–∫–æ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ - —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ!
'''

        await call.message.edit_text(text=caption, reply_markup=edit_pictures_dv(product_id=callback_data.product_id).as_markup())
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_state = await state.get_state()

        if current_state is None:
            return
            
        await state.clear()
    elif callback_data.what_to_edit == 'product_description':
        await state.set_state(Edit_Product_DV.edit_product_dv)
        await state.update_data(what_to_edit='product_description_dv')
        await call.message.edit_text('–ö–∞–∫–æ–µ –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞?', reply_markup=cancel_edit_product(product_id=callback_data.product_id).as_markup())
    elif callback_data.what_to_edit == 'product_price':
        await state.set_state(Edit_Product_DV.edit_product_dv)
        await state.update_data(what_to_edit='product_price_dv')
        await call.message.edit_text('–ö–∞–∫–∞—è –±—É–¥–µ—Ç –Ω–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞?', reply_markup=cancel_edit_product(product_id=callback_data.product_id).as_markup())
    elif callback_data.what_to_edit == 'product_discount':
        await state.set_state(Edit_Product_DV.edit_product_dv)
        await state.update_data(what_to_edit='product_discount_dv')
        await call.message.edit_text('–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –æ—Ç 0 –¥–æ 99', reply_markup=cancel_edit_product(product_id=callback_data.product_id).as_markup())
    elif callback_data.what_to_edit == 'product_quantity':
        await state.set_state(Edit_Product_DV.edit_product_dv)
        await state.update_data(what_to_edit='product_quantity_dv')
        await call.message.edit_text('–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ', reply_markup=cancel_edit_product(product_id=callback_data.product_id).as_markup())
    elif callback_data.what_to_edit == 'delivery_methods':   
        await call.message.edit_text(
            text='–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:',
            reply_markup=edit_choose_list_delivery(
                project_id=project_id,
                selected=db.get_list_active_dv_methods(callback_data.product_id)[0][0], 
                product_id=callback_data.product_id,
                page=0
                ).as_markup()
        )
        await state.update_data(new_dv_methods_list=db.get_list_active_dv_methods(callback_data.product_id)[0][0])
    elif callback_data.what_to_edit == 'display_status_off':
        db.update_display_status(product_id=callback_data.product_id, status='–≤—ã–∫–ª—é—á–µ–Ω')
        await call.message.edit_reply_markup(reply_markup=product_delivery_kb(product_id=callback_data.product_id).as_markup())
        await call.answer(text='–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º!', show_alert=True)
    elif callback_data.what_to_edit == 'display_status_on':
        db.update_display_status(product_id=callback_data.product_id, status='–≤–∫–ª—é—á–µ–Ω')
        await call.message.edit_reply_markup(reply_markup=product_delivery_kb(product_id=callback_data.product_id).as_markup()) 
        await call.answer(text='–°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º!', show_alert=True)
    elif callback_data.what_to_edit == 'delete_product':
        await call.message.edit_text(
            text='–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!',
            reply_markup=delete_product_dv(project_id=str(project_id), product_id=callback_data.product_id).as_markup()
        )


@router.callback_query(ListPicturesDv.filter(F.action == 'open_picture_dv'))
async def open_picture_product_dv(call: types.CallbackQuery, callback_data: ListPicturesDv, state: FSMContext):

    photo = db.get_picture_product(picture_id=callback_data.picture_id)

    await call.message.delete()
    await call.message.answer_photo(photo=photo[0][3], reply_markup=picture_dv_kb(picture_id=callback_data.picture_id, product_id=callback_data.product_id).as_markup())


@router.callback_query(ListPicturesDv.filter(F.action == 'back_from_photo_dv'))
async def back_picture_product_dv(call: types.CallbackQuery, callback_data: ListPicturesDv, state: FSMContext):

    caption = '''
üì∏ <b>–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!</b>

üñºÔ∏è –Ø—Ä–∫–æ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ - —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ!
'''

    await call.message.delete()
    await call.message.answer(text=caption, reply_markup=edit_pictures_dv(product_id=callback_data.product_id).as_markup())


@router.callback_query(ListPicturesDv.filter(F.action == 'delete_picture_dv'))
async def delete_picture_product_dv(call: types.CallbackQuery, callback_data: ListPicturesDv, state: FSMContext):
    db.delete_picture_product(picture_id=callback_data.picture_id)

    list_pic = []
    for photo in db.get_list_pictures(product_id=callback_data.product_id):
        list_pic.append(photo[0])

    db.edit_product(product_id=callback_data.product_id, set='product_photo', new_data=list_pic)

    caption = '''
üì∏ <b>–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!</b>

üñºÔ∏è –Ø—Ä–∫–æ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ - —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ!
'''

    await call.message.delete()
    await call.message.answer(text=caption, reply_markup=edit_pictures_dv(product_id=callback_data.product_id).as_markup())
    await call.answer(text='üóë –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!')



@router.callback_query(ListPicturesDv.filter(F.action == 'add_picture_dv'))
async def add_picture_product_dv(call: types.CallbackQuery, callback_data: ListPicturesDv, state: FSMContext):

    await call.message.edit_text(
        text='–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ç–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞üëå',
        reply_markup=cancel_add_picture(product_id=callback_data.product_id).as_markup()
    )

    await state.set_state(Edit_Product_DV.edit_product_dv)
    await state.update_data(what_to_edit='add_picture_dv')




@router.message(Edit_Product_DV.edit_product_dv, or_f(
        F.photo,
        F.text)
)
async def get_new_product_dv_data(msg: types.Message, state: FSMContext):
    getFSM = await state.get_data()
    bot_username = await msg.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    if getFSM.get('what_to_edit') == 'product_name_dv':
        if len(msg.text) > 24:
            await msg.answer('–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            db.edit_product(product_id=getFSM.get('product_id'),  set='product_name', new_data=msg.text)
            await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É',
                reply_markup=return_product_dv_kb(project_id=project_id, product_id=str(getFSM.get('product_id'))).as_markup()
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
            
            await state.clear()

    elif getFSM.get('what_to_edit') == 'product_description_dv':
        if len(msg.text) > 1024:
            await msg.answer('–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            db.edit_product(product_id=getFSM.get('product_id'),  set='product_description', new_data=msg.html_text)
            await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É',
                reply_markup=return_product_dv_kb(project_id=project_id, product_id=str(getFSM.get('product_id'))).as_markup()
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
            
            await state.clear()

    elif getFSM.get('what_to_edit') == 'product_price_dv':
        if 0 < msg.text.isdigit() and int(msg.text) < 1000001:
            db.edit_product(product_id=getFSM.get('product_id'),  set='price', new_data=msg.text)
            await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É',
                reply_markup=return_product_dv_kb(project_id=project_id, product_id=str(getFSM.get('product_id'))).as_markup()
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
        
            await state.clear()
        else:
            await msg.answer('–ü—Ä–∏—à–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–µ–Ω—å—à–µ 1 RUB –∏ –Ω–µ –±–æ–ª—å—à–µ 1,000,000 RUB üòâ')

    elif getFSM.get('what_to_edit') == 'product_discount_dv':
        if -1 < msg.text.isdigit() and int(msg.text) < 100:
            product_data = db.get_product_data(product_id=getFSM.get('product_id'))

            total_price = product_data[0][6] - product_data[0][6] / 100 * int(msg.text)

            if round(total_price) == 0:
                db.edit_product(product_id=getFSM.get('product_id'), set='discount', new_data=msg.text)
                await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É', 
                reply_markup=return_product_dv_kb(project_id=project_id, product_id=str(getFSM.get('product_id'))).as_markup()
            )
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                current_state = await state.get_state()

                if current_state is None:
                    return
        
                await state.clear()
            elif round(total_price) > 0:
                db.edit_product(product_id=getFSM.get('product_id'), set='discount', new_data=msg.text)
                await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É', 
                reply_markup=return_product_dv_kb(project_id=project_id, product_id=str(getFSM.get('product_id'))).as_markup()
            )
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                current_state = await state.get_state()

                if current_state is None:
                    return
        
                await state.clear()
            else:
                await msg.answer(text='–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 üá∑üá∫RUB.')
        else:
            await msg.answer(text='–ü—Ä–∏—à–ª–∏ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –æ—Ç 0 –¥–æ 99')
    elif getFSM.get('what_to_edit') == 'product_quantity_dv':
        if -1 < msg.text.isdigit() and int(msg.text) < 1000000:
            db.edit_product(product_id=getFSM.get('product_id'),  set='quantity', new_data=msg.text)
            await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É',
                reply_markup=return_product_dv_kb(project_id=project_id, product_id=str(getFSM.get('product_id'))).as_markup()
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
            
            await state.clear()
        else:
            await msg.answer('–ü—Ä–∏—à–ª–∏ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 999999')
    elif getFSM.get('what_to_edit') == 'add_picture_dv':
        try:
            picture_id = msg.photo[-1].file_id
            db.add_new_picture_product(product_id=getFSM.get('product_id'), picture_id=picture_id) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ

            list_pic = []
            for photo in db.get_list_pictures(product_id=getFSM.get('product_id')):
                list_pic.append(photo[0])

            db.edit_product(product_id=getFSM.get('product_id'), set='product_photo', new_data=list_pic)
        
            await msg.answer(text='‚úÖ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', reply_markup=return_list_picture(product_id=getFSM.get('product_id')).as_markup())

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
            
            await state.clear()
        except:
            await msg.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ')
        



@router.callback_query(ChooseMethodDV.filter(F.action == 'edit_choose_method'))
async def edit_choose_dv_methods(call: types.CallbackQuery, callback_data: ChooseMethodDV, state: FSMContext):
    getFSM = await state.get_data()
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)
    
    # --------------- –ó–¥–µ—Å—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    selected = getFSM.get('new_dv_methods_list')

    if callback_data.method_id in selected:
        if len(selected) == 1:
            await call.answer(
                text='–ù—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏üòâ',
                show_alert=True
            )
        else:
            selected.remove(f'{callback_data.method_id}')
    else:
        selected.append(callback_data.method_id)
    await state.update_data(new_dv_methods_list=selected)
    # ---------------


    try:
        await call.message.edit_text(
            text='–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', 
            reply_markup=edit_choose_list_delivery(
                project_id=project_id, 
                product_id=getFSM.get('product_id'), 
                page=callback_data.page, 
                selected=selected).as_markup()
        )
    except:
        pass



@router.callback_query(Paginator.filter(F.array_name == 'edit_method_of_choice'))
async def paginator_edit_methods_of_choice(call: types.CallbackQuery, callback_data: Paginator, state: FSMContext):
    getFSM = await state.get_data()
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    selected = getFSM.get('new_dv_methods_list')


    button = callback_data.button
    page = int(callback_data.page)
    max_pages = int(callback_data.max_pages)


    if button == 'next':
        if page < max_pages-1:
            page += 1
            await call.message.edit_text('–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=edit_choose_list_delivery(project_id=project_id, product_id=getFSM.get('product_id'), page=page, selected=selected).as_markup())
        else:
            await call.answer(text='–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    else:
        if page > 0:
            page -= 1
            await call.message.edit_text('–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=edit_choose_list_delivery(project_id=project_id, product_id=getFSM.get('product_id'), page=page, selected=selected).as_markup())
        else:
            await call.answer(text='–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')






@router.callback_query(EditProducrDV.filter(F.action == 'delete_dv'))
async def del_product_dv(call: types.CallbackQuery, callback_data: EditProducrDV, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)
    
    delete_status = True

    for item in db.get_all_processing(project_id=project_id): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–ø–ª–∞—Ç—ã. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–ø–ª–∞—Ç—ã, —Ç–æ —É–¥–∞–ª–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
        if callback_data.product_id == str(item[7]):
            delete_status = False
            break


    if delete_status:
        for group in db.get_all_groups(project_id=project_id): # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
            if callback_data.product_id in group[6]: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–¥–∞–ª—è–µ–º—ã —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
                new_list = group[6]
                new_list.remove(f'{callback_data.product_id}') # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
                db.update_list_product_to_group(group_id=group[0], selected=new_list) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ

        db.delete_product(product_id=callback_data.product_id)

        await call.message.edit_text(
            text='üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!',
            reply_markup=return_list_products_dv().as_markup()
        )
        
    else:
        await call.answer(
                text='–¢–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–ø–ª–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚è≥',
                show_alert=True
            )




    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()




























# DELIVERY METHODS

@router.callback_query(ListProductsDv.filter(F.action == 'open_delivery_methods'))
async def call_delivery_methods(call: types.CallbackQuery, callback_data: ListProductsDv):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)


    caption = '''
–î–æ–±–∞–≤—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: 

* –ù–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö—É—Ä—å–µ—Ä—Å–∫–∞—èüí®, –°–∞–º–æ–≤—ã–≤–æ–∑üö∂)
* –û–ø–∏—Å–∞–Ω–∏–µ (—Å—Ä–æ–∫–∏, —É—Å–ª–æ–≤–∏—è)
* –°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)
'''

    await call.message.edit_text(
        text=caption,
        reply_markup=user_methods_dv_kb(project_id=project_id, page=0).as_markup()
    )



# OPEN DELIVERY METHOD 

@router.callback_query(ListMethodsDv.filter(F.action == 'open_methods_dv'))
async def call_delivery_methods(call: types.CallbackQuery, callback_data: ListMethodsDv, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    method_data = db.get_method_data(method_id=callback_data.method_id)

    caption = f'''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {method_data[0][2]}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {method_data[0][3]}

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {method_data[0][4]} üá∑üá∫RUB
'''
        
    await call.message.edit_text(
        text=caption,
        reply_markup=method_delivery_kb(method_id=callback_data.method_id, project_id=project_id).as_markup()
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()



# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ DELIVERY

@router.callback_query(Paginator.filter(F.array_name == 'methods_dv'))
async def paginator_delivery_methods(call: types.CallbackQuery, state: FSMContext, callback_data: Paginator):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    button = callback_data.button
    page = int(callback_data.page)
    max_pages = int(callback_data.max_pages)

    caption = '''
–î–æ–±–∞–≤—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: 

* –ù–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö—É—Ä—å–µ—Ä—Å–∫–∞—èüí®, –°–∞–º–æ–≤—ã–≤–æ–∑üö∂)
* –û–ø–∏—Å–∞–Ω–∏–µ (—Å—Ä–æ–∫–∏, —É—Å–ª–æ–≤–∏—è)
* –°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)
'''

    if button == 'next':
        if page < max_pages-1:
            page += 1
            await call.message.edit_text(
                text=caption,
                reply_markup=user_methods_dv_kb(project_id=project_id, page=page).as_markup()
            )
        else:
            await call.answer(text='–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    else:
        if page > 0:
            page -= 1
            await call.message.edit_text(
                text=caption,
                reply_markup=user_methods_dv_kb(project_id=project_id, page=page).as_markup()
            )
        else:
            await call.answer(text='–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()




# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

@router.callback_query(ListMethodsDv.filter(F.action == 'add_new_methods_dv'))
async def add_new_product_dv(call: types.CallbackQuery, callback_data: ListMethodsDv, state: FSMContext):

    await call.message.edit_text('–ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏üòâ', reply_markup=cancel_add_method_dv(project_id=callback_data.project_id).as_markup())

    await state.set_state(Add_Delivery_method.method_name)


@router.message(Add_Delivery_method.method_name, F.text)
async def get_method_name_dv(msg: types.Message, state: FSMContext):
    bot_username = await msg.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    if len(msg.text) > 24:
        await msg.answer('–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=cancel_add_method_dv(project_id=project_id).as_markup())
    else:
        await msg.answer('–ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏üòâ', reply_markup=cancel_add_method_dv(project_id=project_id).as_markup())

        await state.set_state(Add_Delivery_method.method_description)
        await state.update_data(method_name=msg.text)


@router.message(Add_Delivery_method.method_description, F.text)
async def get_method_description_dv(msg: types.Message, state: FSMContext):
    bot_username = await msg.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    if len(msg.html_text) > 1024:
        await msg.answer('–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=cancel_add_method_dv(project_id=project_id).as_markup())
    else:
        await msg.answer('–ü—Ä–∏—à–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏üòâ', reply_markup=cancel_add_method_dv(project_id=project_id).as_markup())

        await state.set_state(Add_Delivery_method.method_price)
        await state.update_data(method_description=msg.html_text)


@router.message(Add_Delivery_method.method_price, F.text)
async def get_product_price_dv(msg: types.Message, state: FSMContext):
    bot_username = await msg.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    if msg.text.isdigit() and int(msg.text) > -1:
        getFSM = await state.get_data()

        db.add_delivery_method(
            project_id=project_id,
            name=getFSM.get('method_name'),
            description=getFSM.get('method_description'),
            price=msg.text
        )

        method_data = db.get_last_delivery_method(project_id=project_id)

        caption = f'''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {method_data[0][2]}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {method_data[0][3]}

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {method_data[0][4]} üá∑üá∫RUB
'''
        
        await msg.answer(
            text=caption,
            reply_markup=method_delivery_kb(method_id=method_data[0][0], project_id=project_id).as_markup()
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_state = await state.get_state()

        if current_state is None:
            return
        
        await state.clear()
    else:
        await msg.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 RUB üôÉ', reply_markup=cancel_add_method_dv(project_id=project_id).as_markup())


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

@router.callback_query(EditMethodDV.filter(F.action == 'edit_method_dv'))
async def edit_dv_method(call: types.CallbackQuery, callback_data: EditMethodDV, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)
    await state.update_data(method_id=callback_data.method_id)


    if callback_data.what_to_edit == 'method_name':
        await state.set_state(Edit_Method_DV.edit_method_dv)
        await state.update_data(what_to_edit='method_name')
        await call.message.edit_text('–ö–∞–∫–æ–µ –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏?', reply_markup=cancel_edit_method_dv(method_id=callback_data.method_id).as_markup())
    elif callback_data.what_to_edit == 'method_description':
        await state.set_state(Edit_Method_DV.edit_method_dv)
        await state.update_data(what_to_edit='method_description')
        await call.message.edit_text('–ö–∞–∫–æ–µ –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏?', reply_markup=cancel_edit_method_dv(method_id=callback_data.method_id).as_markup())
    elif callback_data.what_to_edit == 'method_price':
        await state.set_state(Edit_Method_DV.edit_method_dv)
        await state.update_data(what_to_edit='method_price')
        await call.message.edit_text('–ö–∞–∫–∞—è –±—É–¥–µ—Ç –Ω–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏?', reply_markup=cancel_edit_method_dv(method_id=callback_data.method_id).as_markup())
    elif callback_data.what_to_edit == 'display_status_off':
        db.method_display_status(method_id=callback_data.method_id, status=False)
        await call.message.edit_reply_markup(reply_markup=method_delivery_kb(method_id=callback_data.method_id, project_id=project_id).as_markup())
        await call.answer(text='–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º!', show_alert=True)
    elif callback_data.what_to_edit == 'display_status_onn':
        db.method_display_status(method_id=callback_data.method_id, status=True)
        await call.message.edit_reply_markup(reply_markup=method_delivery_kb(method_id=callback_data.method_id,project_id=project_id).as_markup()) 
        await call.answer(text='–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º!', show_alert=True)
    elif callback_data.what_to_edit == 'delete_method':
        await call.message.edit_text(
            text='–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏?\n–¢–æ–≤–∞—Ä—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –æ–Ω –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω, –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º!',
            reply_markup=delete_method_dv(project_id=str(project_id), method_id=callback_data.method_id).as_markup()
        )


@router.message(Edit_Method_DV.edit_method_dv, F.text)
async def get_new_dv_method_data(msg: types.Message, state: FSMContext):
    getFSM = await state.get_data()
    bot_username = await msg.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    if getFSM.get('what_to_edit') == 'method_name':
        if len(msg.text) > 24:
            await msg.answer('–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            db.edit_dv_method(method_id=getFSM.get('method_id'),  set='method_name', new_data=msg.text)
            await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!',
                reply_markup=return_edit_method_dv(method_id=getFSM.get('method_id')).as_markup()
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
            
            await state.clear()

    elif getFSM.get('what_to_edit') == 'method_description':
        if len(msg.text) > 1024:
            await msg.answer('–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤')
        else:
            db.edit_dv_method(method_id=getFSM.get('method_id'),  set='method_description', new_data=msg.html_text)
            await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!',
                reply_markup=return_edit_method_dv(method_id=getFSM.get('method_id')).as_markup()
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
            
            await state.clear()

    elif getFSM.get('what_to_edit') == 'method_price':
        if -1 < msg.text.isdigit() and int(msg.text) < 1000001:
            db.edit_dv_method(method_id=getFSM.get('method_id'),  set='cost_of_delivery', new_data=msg.text)
            await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!',
                reply_markup=return_edit_method_dv(method_id=getFSM.get('method_id')).as_markup()
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
        
            await state.clear()
        else:
            await msg.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 RUB –∏ –Ω–µ –±–æ–ª—å—à–µ 1,000,00 RUB')




@router.callback_query(EditMethodDV.filter(F.action == 'delete_method_dv'))
async def delete_method(call: types.CallbackQuery, callback_data: EditMethodDV, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username.username)

    list_product_name = ''

    for product in db.get_product_dv_methods(project_id=project_id): # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–π–¥–∏ –∏ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ —Ü–∏–∫–ª
        if str(callback_data.method_id) in product[1]: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–ø–∏—Å–∫–µ —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ - —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–π –º—ã —É–¥–∞–ª–∏–ª–∏
            list_product_name += f'\n* {product[2]}'


    if len(list_product_name) > 0:
        await call.message.answer(
            text=f'<b>–ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏, –æ—Ç–≤—è–∂–∏—Ç–µ –µ–≥–æ –æ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>\n{list_product_name}',
        )
        await call.answer(show_alert=True)
    else:
        db.delete_method_dv(method_id=callback_data.method_id) # –£–¥–∞–ª—è–µ–º —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏


        caption = '''
–î–æ–±–∞–≤—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: 

* –ù–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö—É—Ä—å–µ—Ä—Å–∫–∞—èüí®, –°–∞–º–æ–≤—ã–≤–æ–∑üö∂)
* –û–ø–∏—Å–∞–Ω–∏–µ (—Å—Ä–æ–∫–∏, —É—Å–ª–æ–≤–∏—è)
* –°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏)
'''

        await call.message.edit_text(
            text=caption,
            reply_markup=user_methods_dv_kb(project_id=project_id, page=0).as_markup()
        )
        await call.answer(text='üóë –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ —É–¥–∞–ª–µ–Ω!')


    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()













# DELIVERY ORDERS


@router.callback_query(ListProductsDv.filter(F.action == 'open_delivery_orders'))
async def call_delivery_orders(call: types.CallbackQuery, callback_data: ListProductsDv):


    caption = '''
<b>–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ: </b> 

<b>* –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ üòâ</b> -  <i>—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∑–∞–∫–∞–∑—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –≤ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑).</i>
<b>* –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä üöö</b> -  <i>–¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–≥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑.</i>
<b>* –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π  üí¨</b> -  <i>–∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–∫–∞–∑—É.</i>

–í—Å–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã - –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ, –≤—Å—ë —É–¥–æ–±–Ω–æ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ! üëå
'''

    await call.message.edit_text(
        text=caption,
        reply_markup=choose_orders().as_markup()
    )



@router.callback_query(DeliveryOrders.filter(F.action == 'list_orders'))
async def call_open_orders(call: types.CallbackQuery, callback_data: DeliveryOrders):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username.username)

    if callback_data.order_path == 'orders_are_being_processed':  
        await call.message.edit_text(
            text='‚è≥ –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞–∫–∞–∑—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            reply_markup=list_delivery_orders(project_id=project_id, order_status='–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ', page=0).as_markup()
        )
    elif callback_data.order_path == 'orders_on_the_way':
        await call.message.edit_text(
            text='‚úàÔ∏è –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞–∫–∞–∑—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –ø—É—Ç–∏',
            reply_markup=list_delivery_orders(project_id=project_id, order_status='–≤ –ø—É—Ç–∏', page=0).as_markup()
        )
    elif callback_data.order_path == 'completed_order':
        await call.message.edit_text(
            text='‚úÖ –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã',
            reply_markup=list_delivery_orders(project_id=project_id, order_status='–∑–∞–≤–µ—Ä—à–µ–Ω', page=0).as_markup()
        )



# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ ORDERS

@router.callback_query(PaginatorOrders.filter(F.array_name == 'pag_orders_dv'))
async def paginator_delivery_orders(call: types.CallbackQuery, state: FSMContext, callback_data: PaginatorOrders):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    button = callback_data.button
    page = int(callback_data.page)
    max_pages = int(callback_data.max_pages)

    if callback_data.order_status == '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ':
        caption = '''
‚è≥ –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞–∫–∞–∑—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
'''
    elif callback_data.order_status == '–≤ –ø—É—Ç–∏':
        caption = '''
‚úàÔ∏è –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞–∫–∞–∑—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –ø—É—Ç–∏
'''
    elif callback_data.order_status == '–≤ –ø—É—Ç–∏':
        caption = '''
‚úÖ –ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
'''


    if button == 'next':
        if page < max_pages-1:
            page += 1
            await call.message.edit_text(
                text=caption,
                reply_markup=list_delivery_orders(project_id=project_id, page=page, order_status=callback_data.order_status).as_markup()
            )
        else:
            await call.answer(text='–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    else:
        if page > 0:
            page -= 1
            await call.message.edit_text(
                text=caption,
                reply_markup=list_delivery_orders(project_id=project_id, page=page, order_status=callback_data.order_status).as_markup()
            )
        else:
            await call.answer(text='–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()



# –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑

@router.callback_query(DeliveryOrders.filter(F.action == 'open_order'))
async def call_open_order(call: types.CallbackQuery, callback_data: DeliveryOrders, state: FSMContext):

    order_data = db.get_order_data(order_id=callback_data.order_path)
    user = db.get_user_data(project_id=order_data[0][3], user_id=order_data[0][2])

    caption = f'''
<b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–ê–ó–ï</b>

<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{order_data[0][0]}</code>

<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> ID <code>{order_data[0][2]}</code> USERNAME {'–Ω–µ —É–∫–∞–∑–∞–Ω' if user[0][4] == 'None' else f'<code>{user[0][4]}</code>'}

<b>–¢–æ–≤–∞—Ä:</b> {order_data[0][4]}
<b>–ö–æ–ª-–≤–æ:</b> {order_data[0][6]}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –µ–¥. —Ç–æ–≤–∞—Ä–∞:</b> {order_data[0][5]} üá∑üá∫RUB

<b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_data[0][7]}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_data[0][8]} üá∑üá∫RUB

<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_data[0][9]}
<b>–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä:</b> {order_data[0][10]}
<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> {order_data[0][11]}

<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {order_data[0][12]}
'''

    
    if order_data[0][11] == '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ':
        order_path = 'orders_are_being_processed'
    elif order_data[0][11] == '–≤ –ø—É—Ç–∏':
        order_path = 'orders_on_the_way'
    else:
        order_path = 'completed_order'
    
    await call.message.edit_text(
        text=caption,
        reply_markup=order_kb(order_path=f'{order_path}', order_id=order_data[0][0]).as_markup()
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞

@router.callback_query(EditDeliveryOrder.filter(F.action == 'edit_order'))
async def call_edit_order(call: types.CallbackQuery, callback_data: EditDeliveryOrder, state: FSMContext):
    order_data = db.get_order_data(order_id=callback_data.order_id)


    if callback_data.what_to_edit == 'edit_order_comment':
        await call.message.edit_text(
            text='üí¨ –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É\n\n<i>üîî –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</i>',
            reply_markup=cancel_edit_order_data(order_id=callback_data.order_id).as_markup()
        )

        await state.set_state(Edit_Order_DV.action)
        await state.update_data(action='order_comment')
        await state.update_data(order_id=f'{callback_data.order_id}')
    elif callback_data.what_to_edit == 'edit_order_status':
        await call.message.edit_text(
            text='‚úÖ –ò–∑–º–µ–Ω–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n\n<i>üîî –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</i>',
            reply_markup=edit_order_status(order_id=callback_data.order_id, order_status=order_data[0][11]).as_markup()
        )
    elif callback_data.what_to_edit == 'edit_order_track_number':
        await call.message.edit_text(
            text='üîó –î–æ–±–∞–≤—å —Ç—Ä–µ–∫—Ç-–Ω–æ–º–µ—Ä –∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n<i>üîî –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</i>',
            reply_markup=cancel_edit_order_data(order_id=callback_data.order_id).as_markup()
        )

        await state.set_state(Edit_Order_DV.action)
        await state.update_data(action='order_track_number')
        await state.update_data(order_id=f'{callback_data.order_id}')





# –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

@router.callback_query(EditDeliveryOrder.filter(F.action == 'edit_order_status'))
async def call_edit_order_status(call: types.CallbackQuery, callback_data: EditDeliveryOrder):
    order_data = db.get_order_data(order_id=callback_data.order_id)

    if callback_data.what_to_edit == '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ':
        db.update_order_status(order_id=callback_data.order_id, status=f'{callback_data.what_to_edit}')
        order_path = 'orders_are_being_processed'
    elif callback_data.what_to_edit == '–≤ –ø—É—Ç–∏':
        db.update_order_status(order_id=callback_data.order_id, status=f'{callback_data.what_to_edit}')
        order_path = 'orders_on_the_way'
    elif callback_data.what_to_edit == '–∑–∞–≤–µ—Ä—à–µ–Ω':
        db.update_order_status(order_id=callback_data.order_id, status=f'{callback_data.what_to_edit}')
        order_path = 'completed_order'

    order_data = db.get_order_data(order_id=callback_data.order_id)
    user = db.get_user_data(project_id=order_data[0][3], user_id=order_data[0][2])

    caption = f'''
<b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ö–ê–ó–ï</b>

<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{order_data[0][0]}</code>

<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> ID <code>{order_data[0][2]}</code> USERNAME {'–Ω–µ —É–∫–∞–∑–∞–Ω' if user[0][4] == 'None' else f'<code>{user[0][4]}</code>'}

<b>–¢–æ–≤–∞—Ä:</b> {order_data[0][4]}
<b>–ö–æ–ª-–≤–æ:</b> {order_data[0][6]}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –µ–¥. —Ç–æ–≤–∞—Ä–∞:</b> {order_data[0][5]} üá∑üá∫RUB

<b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_data[0][7]}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_data[0][8]} üá∑üá∫RUB

<b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_data[0][9]}
<b>–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä:</b> {order_data[0][10]}
<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> {order_data[0][11]}

<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {order_data[0][12]}
'''

    await call.message.edit_text(
        text=caption,
        reply_markup=order_kb(order_path=f'{order_path}', order_id=order_data[0][0]).as_markup()
    )

    try:
        await call.bot.send_message(chat_id=order_data[0][2], text=f'–ü—Ä–æ–¥–∞–≤–µ—Ü –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —Å –Ω–æ–º–µ—Ä–æ–º: {order_data[0][0]}') 
    except:
        await call.answer(text='–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ üö´', show_alert=True)





@router.message(Edit_Order_DV.action, F.text)
async def edit_comment_tracknumber(msg: types.Message, state: FSMContext):
    getFSM = await state.get_data()
    order_data = db.get_order_data(order_id=getFSM.get('order_id'))


    if getFSM.get('action') == 'order_comment':
        if len(msg.text) > 512:
            await msg.answer(
                text='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–πüôÉ\n\n–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 512 —Å–∏–º–≤–æ–ª–æ–≤',
                reply_markup=cancel_edit_order_data(order_id=getFSM.get('order_id')).as_markup()
            )
        else:
            db.update_order_data(order_id=getFSM.get('order_id'), what_to_edit='order_comment', data=msg.text)

            await msg.answer(
                text='‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É!',
                reply_markup=return_order_data(order_id=order_data[0][0]).as_markup()
            )

            try:
                await msg.bot.send_message(chat_id=order_data[0][2], text=f'–ü—Ä–æ–¥–∞–≤–µ—Ü –∏–∑–º–µ–Ω–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–∫–∞–∑–∞ —Å –Ω–æ–º–µ—Ä–æ–º: {order_data[0][0]}') 
            except:
                await msg.answer(text='–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ üö´', show_alert=True)
    elif getFSM.get('action') == 'order_track_number':
        if len(msg.text) > 1028:
            await msg.answer(
                text='–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 128 —Å–∏–º–≤–æ–ª–æ–≤',
                reply_markup=cancel_edit_order_data(order_id=getFSM.get('order_id')).as_markup()
            )
        else:
            db.update_order_data(order_id=getFSM.get('order_id'), what_to_edit='track_number', data=msg.text)

            await msg.answer(
                text='‚úÖ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–∫–∞–∑—É!',
                reply_markup=return_order_data(order_id=order_data[0][0]).as_markup()
            )

            try:
                await msg.bot.send_message(chat_id=order_data[0][2], text=f'–ü—Ä–æ–¥–∞–≤–µ—Ü –∏–∑–º–µ–Ω–∏–ª —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å –Ω–æ–º–µ—Ä–æ–º: {order_data[0][0]}') 
            except:
                await msg.answer(text='–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ üö´', show_alert=True)


    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()