from aiogram import types, F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext



from Database.Admin_db import Database


from Keyboards.admin_keyboards.menu_keyboards import(
    start_admin_kb,
    cancel_kb,
)
from Keyboards.admin_keyboards.design_keyboards import(
    design_kb,
    design_message_kb,
    edit_message_kb,
    design_decor_kb,
    menu_picture_kb,
    cancel_add_menu_pic,
    picture_kb,
    cancel_edit_message,
    EditMessage,
    Edit,
    DesignDecor
)




db = Database()
router = Router()




class EditCaption(StatesGroup):
    edit_caption = State()
    project_id = State()


class Add_Menu_Pic(StatesGroup):
    get_photo = State()
    project_id = State()



@router.callback_query(F.data == 'design')
async def call_design(call: types.CallbackQuery):
    caption = '''
<b>üé® –î–ò–ó–ê–ô–ù</b>

–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:

<blockquote><b>–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üñº</b>

–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ–ª–µ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.</blockquote>
<blockquote><b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚úâÔ∏è</b>

–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏!</blockquote>
'''

    await call.message.edit_text(f'{caption}', reply_markup=design_kb().as_markup())




# –†–∞–∑–¥–µ–ª design_decor

@router.callback_query(F.data == 'design_decor')
async def call_design_decor(call: types.CallbackQuery):

    caption = '''
–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
'''

    await call.message.edit_text(
        text=caption,
        reply_markup=design_decor_kb().as_markup()
    )


@router.callback_query(DesignDecor.filter(F.action == 'menu_picture'))
async def call_menu_picture(call: types.CallbackQuery, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    caption = '''
–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ
'''

    try:
        await call.message.edit_text(
            text=caption,
            reply_markup=menu_picture_kb(project_id=project_id).as_markup()
        )
    except:
        await call.message.delete()
        await call.message.answer(
            text=caption,
            reply_markup=menu_picture_kb(project_id=project_id).as_markup()
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()



@router.callback_query(DesignDecor.filter(F.action == 'open_menu_picture'))
async def call_open_menu_picture(call: types.CallbackQuery, callback_data: DesignDecor):

    photo = db.get_pic(pic_id=callback_data.data)

    await call.message.delete()
    await call.message.answer_photo(
        photo=photo[0][3],
        reply_markup=picture_kb(picture_id=photo[0][0]).as_markup()
    )



@router.callback_query(DesignDecor.filter(F.action == 'add_menu_picture'))
async def call_add_menu_picture(call: types.CallbackQuery, callback_data: DesignDecor, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    await call.message.edit_text(
        text='–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ...',
        reply_markup=cancel_add_menu_pic().as_markup()
    )

    await state.set_state(Add_Menu_Pic.get_photo)
    await state.update_data(project_id=project_id)


@router.message(Add_Menu_Pic.get_photo)
async def get_menu_picture(msg: types.Message, state: FSMContext):
    getFSM = await state.get_data()

    if msg.content_type == types.ContentType.PHOTO:
        db.add_menu_picture(project_id=getFSM.get('project_id'), photo=msg.photo[-1].file_id)

        caption = '''
–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ
'''

        await msg.answer(
            text=caption,
            reply_markup=menu_picture_kb(project_id=getFSM.get('project_id')).as_markup()
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_state = await state.get_state()

        if current_state is None:
            return
            
        await state.clear()
    else:
        await msg.answer(
            text='–¢—ã –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ üôÉ\n–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ...',
            reply_markup=cancel_add_menu_pic().as_markup()
        )



@router.callback_query(DesignDecor.filter(F.action == 'delete_menu_pic'))
async def call_delete_menu_picture(call: types.CallbackQuery, callback_data: DesignDecor):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    db.delete_menu_picture(picture_id=callback_data.data)

    caption = '''
–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ
'''

    await call.message.delete()
    await call.message.answer(
        text=caption,
        reply_markup=menu_picture_kb(project_id=project_id).as_markup()
    )







# –†–∞–∑–¥–µ–ª design_message


@router.callback_query(F.data == 'design_message')
async def call_design_message(call: types.CallbackQuery):
    caption = '''
<b>üé® –î–∏–∑–∞–π–Ω</b>

–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –¥–µ–ª–∞—è –µ–≥–æ –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

<blockquote>üí≥ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.</blockquote>
<blockquote>üëã –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ /start: –ó–∞–¥–∞–π—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</blockquote>
<blockquote>üè† –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —á—Ç–æ–±—ã –ª—É—á—à–µ –æ—Ç—Ä–∞–∑–∏—Ç—å —Å—É—Ç—å –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.</blockquote>
'''

    await call.message.edit_text(f'{caption}', reply_markup=design_message_kb().as_markup())



@router.callback_query(EditMessage.filter(F.message == 'message'))
async def call_edit_message(call: types.CallbackQuery, callback_data: EditMessage):
    bot_username = await call.bot.get_me()

    if call.from_user.id == db.check_user_id_admin(bot_username=bot_username.username):
        if callback_data.edit == 'start_caption':
            caption = ''

            if db.get_caption(caption='start_caption', bot_username=bot_username.username) == '':
                caption = '–°—Ç–∞—Ä–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ'
            else: 
                caption = f"{db.get_caption(caption='start_caption', bot_username=bot_username.username)}"
            
            await call.message.edit_text(text=f'<b>–°–¢–ê–†–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n{caption}', reply_markup=edit_message_kb(edit='start_caption', project_id=db.get_project_id(bot_username=bot_username.username)).as_markup())
        elif callback_data.edit == 'menu_caption':
            caption = ''

            if db.get_caption(caption='menu_caption', bot_username=bot_username.username) == '':
                caption = 'C–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é –Ω–µ –∑–∞–¥–∞–Ω–æ'
            else: 
                caption = f"{db.get_caption(caption='menu_caption', bot_username=bot_username.username)}"
            
            await call.message.edit_text(text=f'<b>–°–û–û–ë–©–ï–ù–ò–ï –ü–û–°–õ–ï –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê</b>\n\n{caption}', reply_markup=edit_message_kb(edit='menu_caption', project_id=db.get_project_id(bot_username=bot_username.username)).as_markup())
        elif callback_data.edit == 'after_payment_caption':
            caption = ''

            if db.get_caption(caption='after_payment_caption', bot_username=bot_username.username) == '':
                caption = 'C–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω–æ'
            else: 
                caption = f"{db.get_caption(caption='after_payment_caption', bot_username=bot_username.username)}"
            
            await call.message.edit_text(text=f'<b>–°–û–û–ë–©–ï–ù–ò–ï –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ô –û–ü–õ–ê–¢–´</b>\n\n{caption}', reply_markup=edit_message_kb(edit='after_payment_caption', project_id=db.get_project_id(bot_username=bot_username.username)).as_markup()) 



@router.callback_query(Edit.filter(F.edit_message == 'edit_message'))
async def call_edit(call: types.CallbackQuery, callback_data: Edit, state: FSMContext):
    await call.message.edit_text(
        text='–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç', 
        reply_markup=cancel_edit_message(edit=callback_data.edit).as_markup()
    )

    await state.set_state(EditCaption.edit_caption)
    await state.update_data(edit_caption = callback_data.edit)
    await state.update_data(project_id = callback_data.project_id)



@router.message(EditCaption.edit_caption, F.text)
async def get_new_caption(msg: types.Message, state: FSMContext):
    getFSM = await state.get_data()
    bot_username = await msg.bot.get_me()

    if len(msg.text) < 1025:
        db.edit_caption(project_id=getFSM.get('project_id'), caption=getFSM.get('edit_caption'), new_caption=msg.html_text)   

        caption = str(db.get_caption(caption=getFSM.get('edit_caption'), bot_username=bot_username.username))

        if getFSM.get('edit_caption') == 'start_caption':
            chapter = '<b>–°–¢–ê–†–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>'
        elif getFSM.get('edit_caption') == 'menu_caption':
            chapter = '<b>–°–û–û–ë–©–ï–ù–ò–ï –ü–û–°–õ–ï –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê</b>'
        elif getFSM.get('edit_caption') == 'after_payment_caption':
            chapter = '<b>–°–û–û–ë–©–ï–ù–ò–ï –ü–û–°–õ–ï –£–°–ü–ï–®–ù–û–ô –û–ü–õ–ê–¢–´</b>'

        await msg.answer(text=f"{chapter}\n\n{caption}", reply_markup=edit_message_kb(edit=getFSM.get('edit_caption'), project_id=getFSM.get('project_id')).as_markup())

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if getFSM is None:
            return

        await state.clear()

    else:
        await msg.answer(
            text='–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1024 —Å–∏–º–≤–æ–ª–æ–≤!',
            reply_markup=cancel_edit_message(edit=getFSM.get('edit_caption')).as_markup()
        )