from aiogram import types, F, Router
from aiogram.filters import or_f, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import create_start_link


from Database.Admin_db import Database


from Keyboards.admin_keyboards.inf_products_keyboards import(
    user_products_inf_kb,
    product_inf_kb,
    cancel_edit_product_inf,
    contetn_no_reusable_product_inf,
    return_product_inf_kb,
    delete_product_inf_product,
    return_list_products_inf,
    cancel_add_product_inf,
    choose_inf_content,
    skip_add_contnet,
    list_product_content,
    product_content_kb,
    product_content_no_reusable_kb,
    cancel_add_new_content,
    edit_pictures_inf, 
    picture_inf_kb,
    cancel_add_picture_inf,
    return_list_picture_inf,
    cancel_add_new_content_no_reusable,
    ListProductsInf,
    EditProductINF,
    Paginator,
    PaginatorContent,
    CallProductContent,
    ListPicturesInf
)



db = Database()
router = Router()





@router.callback_query(F.data == 'information_products')
async def call_products_inf(call: types.CallbackQuery, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    caption = '''
<b>–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>
'''

    await call.message.edit_text(
        text=caption, 
        reply_markup=user_products_inf_kb(project_id, page=0).as_markup()
    )

    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()


# --------- Paginator

@router.callback_query(Paginator.filter(F.array_name == 'products_inf'))
async def paginator_products_inf(call: types.CallbackQuery, callback_data: Paginator, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    button = callback_data.button
    page = int(callback_data.page)
    max_pages = int(callback_data.max_pages)

    caption = '''
<b>–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>
'''

    if button == 'next':
        if page < max_pages-1:
            page += 1
            await call.message.edit_text(caption, reply_markup=user_products_inf_kb(project_id=project_id, page=page).as_markup())
        else:
            await call.answer(text='–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    else:
        if page > 0:
            page -= 1
            await call.message.edit_text(caption, reply_markup=user_products_inf_kb(project_id=project_id, page=page).as_markup())
        else:
            await call.answer(text='–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()
    
    


@router.callback_query(ListProductsInf.filter(F.open_product_inf == 'open_inf'))
async def open_product_inf(call: types.CallbackQuery, callback_data: ListProductsInf, state: FSMContext):
    product_data = db.get_product_data(product_id=callback_data.product_id)

    link = await create_start_link(call.bot, f'{product_data[0][0]}-{product_data[0][1]}', encode=True)
    total_price = product_data[0][6]

    if product_data[0][7] > 0:
        total_price = total_price - total_price / 100 * product_data[0][7]

    caption = f'''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][8]}
<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][9]}

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][6]} üá∑üá∫RUB
<b>–°–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {product_data[0][7]}%
<b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {round(total_price)} üá∑üá∫RUB

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][11]}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:</b> {product_data[0][13]}

<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {link}
'''


    await call.message.edit_text(
            text=caption,
            reply_markup=product_inf_kb(product_id=product_data[0][0]).as_markup()
        )

    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()





# ----------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

class Add_New_Product_Inf(StatesGroup):
    name_product_inf = State()
    description_product_inf = State()
    price_product_inf = State()
    choose_content = State()
    content_product_inf = State()
    more_inf_content = State()
    product_id = State()




@router.callback_query(F.data == 'add_product_inf')
async def call_add_product_inf(call: types.CallbackQuery, state: FSMContext):
    
    await call.message.edit_text(
        text='–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–≤–æ–π —Ç–æ–≤–∞—Ä?',
        reply_markup=cancel_add_product_inf().as_markup()
    )

    await state.set_state(Add_New_Product_Inf.name_product_inf)



@router.message(Add_New_Product_Inf.name_product_inf, F.text)
async def get_name_product_inf(msg: types.Message, state: FSMContext):

    if len(msg.text) > 24:
        await msg.answer(
            text='–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤',
            reply_markup=cancel_add_product_inf().as_markup()
        )
    else:
        await state.update_data(name_product_inf=msg.text)
        await state.set_state(Add_New_Product_Inf.description_product_inf)

        await msg.answer(
            text='–ö–∞–∫–æ–µ –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞?',
            reply_markup=cancel_add_product_inf().as_markup()
        )


@router.message(Add_New_Product_Inf.description_product_inf, F.text)
async def get_description_product_inf(msg: types.Message, state: FSMContext):

    if len(msg.text) > 1024:
        await msg.answer(
            text='–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤',
            reply_markup=cancel_add_product_inf().as_markup()
        )
    else:
        await state.update_data(description_product_inf=msg.html_text)
        await state.set_state(Add_New_Product_Inf.price_product_inf)

        await msg.answer(
            text='–ö–∞–∫–∞—è –±—É–¥–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞?',
            reply_markup=cancel_add_product_inf().as_markup()
        )


@router.message(Add_New_Product_Inf.price_product_inf, F.text)
async def get_price_product_inf(msg: types.Message, state: FSMContext):

    if msg.text.isdigit() and int(msg.text) > 0:
        await state.update_data(price_product_inf=msg.text)
        await state.set_state(Add_New_Product_Inf.choose_content)

        await msg.answer(
            text='–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –¥–ª—è –≤—Å–µ—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏?\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Steam.',
            reply_markup=choose_inf_content().as_markup()
        )
    else:
        await msg.answer(
            text='–ü—Ä–∏—à–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 RUB üòâ',
            reply_markup=cancel_add_product_inf().as_markup()
        )


@router.callback_query(Add_New_Product_Inf.choose_content, F.data == 'more_inf_content')
async def choose_more_inf_content(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete_reply_markup()
    await call.answer(show_alert=True)
    bot_username = await call.bot.get_me()
    getFSM = await state.get_data()
    project_id = db.get_project_id(bot_username.username)

    db.add_product(
            project_id=project_id,
            product_type='inf',
            reusable='True',
            product_name=getFSM.get('name_product_inf'),
            product_description=getFSM.get('description_product_inf'),
            product_price=getFSM.get('price_product_inf'),
            contents=[],
            product_photo=[]
        )
    product_data = db.get_last_product(project_id, product_type='inf')

    await call.message.edit_text(
        text='<b>–î–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Äüëå</b>\n\n–ü—Ä–∏—à–ª–∏ –ª—é–±–æ–π —Ñ–∞–π–ª, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç',
        reply_markup=skip_add_contnet(product_id=product_data[0][0]).as_markup()
    )

    await state.update_data(product_id=product_data[0][0])
    await state.set_state(Add_New_Product_Inf.more_inf_content)



@router.message(Add_New_Product_Inf.more_inf_content, or_f(
        F.photo,
        F.text,
        F.document,
        F.video,
        F.voice
))
async def add_contnent_product_inf(msg: types.Message, state: FSMContext):
    getFSM = await state.get_data()

    if msg.content_type == types.ContentType.TEXT:
        content = msg.html_text
        content_type = 'text'
    elif msg.content_type == types.ContentType.PHOTO:
        content = msg.photo[-1].file_id
        content_type = 'photo'
    elif msg.content_type == types.ContentType.DOCUMENT:
        content = msg.document.file_id
        content_type = 'document'
    elif msg.content_type == types.ContentType.VOICE:
        content = msg.voice.file_id
        content_type = 'voice'
    elif msg.content_type == types.ContentType.VIDEO:
        content = msg.video.file_id
        content_type = 'video'

    db.add_product_content(product_id=getFSM.get('product_id'), content=content, product_type=content_type)


    list_content = [] # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞ —Ç–æ–≤–∞—Ä–µ

    for content in db.get_list_product_content(product_id=getFSM.get('product_id'))[0][5]:
        list_content.append(str(content))

    list_content.append(db.get_last_product_content(product_id=getFSM.get('product_id'))[0][0]) # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ç–æ–≤–∞—Ä—ã

    db.update_list_contents(product_id=getFSM.get('product_id'), contents_id=list_content, quantity='yes')
    
    await msg.answer(
        text='<b>–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>',
        reply_markup=list_product_content(product_id=getFSM.get('product_id'), page=0).as_markup()
    )


    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()



# –ü–∞–≥–∞–Ω–∏—Ü–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ (–∏–Ω—Ñ–æ–ø—Ä–æ–¥—É–∫—Ç–æ–≤)


@router.callback_query(PaginatorContent.filter(F.array_name == 'content_inf'))
async def paginator_content_inf(call: types.CallbackQuery, callback_data: PaginatorContent, state: FSMContext):

    button = callback_data.button
    page = int(callback_data.page)
    max_pages = int(callback_data.max_pages)

    caption = '''
<b>–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>
'''

    if button == 'next':
        if page < max_pages-1:
            page += 1
            await call.message.edit_text(caption, reply_markup=list_product_content(product_id=callback_data.product_id, page=page).as_markup())
        else:
            await call.answer(text='–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    else:
        if page > 0:
            page -= 1
            await call.message.edit_text(caption, reply_markup=list_product_content(product_id=callback_data.product_id, page=page).as_markup())
        else:
            await call.answer(text='–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
    
    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()
    
















# -----------------------------------

@router.callback_query(CallProductContent.filter(F.action == 'open_content_no_reusable'))
async def open_product_content(call: types.CallbackQuery, callback_data: CallProductContent):
    content_data = db.get_product_content(content_id=callback_data.id)

    if content_data[0][3] == 'text':
        await call.message.edit_text(text=content_data[0][2])
    elif content_data[0][3] == 'video':
        await call.message.delete()
        await call.message.answer_video(video=str(content_data[0][2]))
    elif content_data[0][3] == 'voice':
        await call.message.delete()
        await call.message.answer_voice(voice=str(content_data[0][2]))
    elif content_data[0][3] == 'photo':
        await call.message.delete()
        await call.message.answer_photo(photo=str(content_data[0][2]))
    elif content_data[0][3] == 'document':
        await call.message.delete()
        await call.message.answer_document(document=str(content_data[0][2]))

    caption = 'üëÜ —ç—Ç–æ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã'

    await call.message.answer(
        text=caption,
        reply_markup=product_content_no_reusable_kb(content_id=content_data[0][0], product_id=content_data[0][1]).as_markup()
    )


@router.callback_query(CallProductContent.filter(F.action == 'replace_product_content'))
async def add_new_product_content_inf(call: types.CallbackQuery, callback_data: CallProductContent, state: FSMContext):
    
    await call.message.edit_text(
        text='–ü—Ä–∏—à–ª–∏ –ª—é–±–æ–π —Ñ–∞–π–ª, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç',
        reply_markup=cancel_add_new_content_no_reusable(product_id=callback_data.id).as_markup()
    )

    await state.update_data(product_id=callback_data.id)
    await state.set_state(Edit_Product_Inf.edit_product_inf)
    await state.update_data(what_to_edit='product_content')


# -----------------------------------


@router.callback_query(CallProductContent.filter(F.action == 'open_content'))
async def open_product_content(call: types.CallbackQuery, callback_data: CallProductContent):
    content_data = db.get_product_content(content_id=callback_data.id)

    if content_data[0][3] == 'text':
        await call.message.edit_text(text=content_data[0][2])
    elif content_data[0][3] == 'video':
        await call.message.delete()
        await call.message.answer_video(video=str(content_data[0][2]))
    elif content_data[0][3] == 'voice':
        await call.message.delete()
        await call.message.answer_voice(voice=str(content_data[0][2]))
    elif content_data[0][3] == 'photo':
        await call.message.delete()
        await call.message.answer_photo(photo=str(content_data[0][2]))
    elif content_data[0][3] == 'document':
        await call.message.delete()
        await call.message.answer_document(document=str(content_data[0][2]))

    caption = 'üëÜ —ç—Ç–æ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã'

    await call.message.answer(
        text=caption,
        reply_markup=product_content_kb(content_id=content_data[0][0], product_id=content_data[0][1]).as_markup()
    )
    

@router.callback_query(CallProductContent.filter(F.action == 'delete_product_content')) 
async def delepe_product_content(call: types.CallbackQuery, callback_data: CallProductContent):
    product_id = db.get_product_content(content_id=callback_data.id)[0][1] # –ü–æ–ª—É—á–∏—Ç—å –∞–π–¥–∏—à–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    content_id = str(db.get_product_content(content_id=callback_data.id)[0][0])

    list_content = [] # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞ —Ç–æ–≤–∞—Ä–µ

    for content in db.get_list_product_content(product_id=product_id)[0][5]:
        if content != (content_id):
            list_content.append(str(content))

    db.update_list_contents(product_id=product_id, contents_id=list_content, quantity='yes')

    await call.answer(text='üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!')

    await call.message.edit_text(
        text='–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:',
        reply_markup=list_product_content(product_id=product_id, page=0).as_markup()
    )


@router.callback_query(CallProductContent.filter(F.action == 'add_content'))
async def add_new_product_content_inf(call: types.CallbackQuery, callback_data: CallProductContent, state: FSMContext):
    
    await call.message.edit_text(
        text='–ü—Ä–∏—à–ª–∏ –ª—é–±–æ–π —Ñ–∞–π–ª, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç',
        reply_markup=cancel_add_new_content(product_id=callback_data.id).as_markup()
    )

    await state.set_state(Add_New_Product_Inf.more_inf_content)
    await state.update_data(product_id=callback_data.id)




# -----------------------------------

@router.callback_query(Add_New_Product_Inf.choose_content, F.data == 'one_inf_content')
async def choose_one_inf_content(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete_reply_markup()
    await call.answer(show_alert=True)

    await call.message.answer(
        text='–ü—Ä–∏—à–ª–∏ –ª—é–±–æ–π —Ñ–∞–π–ª, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç'
    )
    await state.set_state(Add_New_Product_Inf.content_product_inf)



@router.message(Add_New_Product_Inf.content_product_inf, or_f(
        F.photo,
        F.text,
        F.document,
        F.video,
        F.voice
))
async def get_content_product_inf(msg: types.Message, state: FSMContext):
    bot_username = await msg.bot.get_me()
    getFSM = await state.get_data()
    project_id = db.get_project_id(bot_username.username)

    if msg.content_type == types.ContentType.TEXT:
        content = msg.html_text
        content_type = 'text'
    elif msg.content_type == types.ContentType.PHOTO:
        content = msg.photo[-1].file_id
        content_type = 'photo'
    elif msg.content_type == types.ContentType.DOCUMENT:
        content = msg.document.file_id
        content_type = 'document'
    elif msg.content_type == types.ContentType.VOICE:
        content = msg.voice.file_id
        content_type = 'voice'
    elif msg.content_type == types.ContentType.VIDEO:
        content = msg.video.file_id
        content_type = 'video'

    db.add_product(
            project_id=project_id,
            product_type='inf',
            reusable='False',
            product_name=getFSM.get('name_product_inf'),
            product_description=getFSM.get('description_product_inf'),
            product_price=getFSM.get('price_product_inf'),
            contents=[],
            product_photo=[]
        )
    product_data = db.get_last_product(project_id, product_type='inf')

    db.add_product_content(product_id=product_data[0][0], content=content, product_type=content_type) # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
    content_id = db.get_last_product_content(product_id=product_data[0][0])[0][0] # –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    db.update_list_contents(product_id=product_data[0][0], contents_id=[content_id], quantity='no') # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Ç–æ–≤–∞—Ä–µ —Å –æ–¥–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º

    link = await create_start_link(msg.bot, f'{product_data[0][0]}', encode=True)
    total_price = product_data[0][6]

    if product_data[0][7] > 0:
        total_price = total_price - total_price / 100 * product_data[0][7]

    caption = f'''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][8]}
<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][9]}

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][6]} üá∑üá∫RUB
<b>–°–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {product_data[0][7]}%
<b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {round(total_price)} üá∑üá∫RUB

<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</b> {product_data[0][11]}
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:</b> {product_data[0][12]}

<b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b> {link}
'''
    
    await msg.answer(
        text=caption,
        reply_markup=product_inf_kb(product_id=product_data[0][0]).as_markup()
    )

    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()






# ----------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–Ω—Ñ–æ–ø—Ä–æ–¥—É–∫—Ç)

class Edit_Product_Inf(StatesGroup):
    edit_product_inf = State()
    product_id = State()
    what_to_edit = State()


@router.callback_query(EditProductINF.filter(F.edit_product == 'edit_inf'))
async def edit_product_inf(call: types.CallbackQuery, callback_data: EditProductINF, state: FSMContext):
    await state.update_data(product_id=callback_data.product_id)
    
    if callback_data.what_to_edit == 'product_photo':

        caption = '''
üì∏ <b>–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!</b>

üñºÔ∏è –Ø—Ä–∫–æ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ - —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ!
'''

        await call.message.edit_text(text=caption, reply_markup=edit_pictures_inf(product_id=callback_data.product_id).as_markup())
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_state = await state.get_state()

        if current_state is None:
            return
            
        await state.clear()
    elif callback_data.what_to_edit == 'product_name':
        await state.set_state(Edit_Product_Inf.edit_product_inf)
        await state.update_data(what_to_edit='product_name')
        await call.message.edit_text(
            text='–ö–∞–∫–æ–µ –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞?',
            reply_markup=cancel_edit_product_inf(product_id=callback_data.product_id).as_markup()
        )
    elif callback_data.what_to_edit == 'product_description':
        await state.set_state(Edit_Product_Inf.edit_product_inf)
        await state.update_data(what_to_edit='product_description')
        await call.message.edit_text(
            text='–ö–∞–∫–æ–µ –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞?',
            reply_markup=cancel_edit_product_inf(product_id=callback_data.product_id).as_markup()
        )
    elif callback_data.what_to_edit == 'product_price':
        await state.set_state(Edit_Product_Inf.edit_product_inf)
        await state.update_data(what_to_edit='product_price')
        await call.message.edit_text(
            text='–ö–∞–∫–∞—è –±—É–¥–µ—Ç –Ω–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞?',
            reply_markup=cancel_edit_product_inf(product_id=callback_data.product_id).as_markup()
        )
    elif callback_data.what_to_edit == 'product_discount':
        await state.set_state(Edit_Product_Inf.edit_product_inf)
        await state.update_data(what_to_edit='product_discount')
        await call.message.edit_text(
            text='–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –æ—Ç 0 –¥–æ 99',
            reply_markup=cancel_edit_product_inf(product_id=callback_data.product_id).as_markup()
        )
    elif callback_data.what_to_edit == 'product_quantity':
        await state.set_state(Edit_Product_Inf.edit_product_inf)
        await state.update_data(what_to_edit='product_quantity')
        await call.message.edit_text(
            text='–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ',
            reply_markup=cancel_edit_product_inf(product_id=callback_data.product_id).as_markup()
        )
    elif callback_data.what_to_edit == 'product_content':
        await call.message.edit_text(
            text='–¢–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:',
            reply_markup=contetn_no_reusable_product_inf(product_id=callback_data.product_id).as_markup()
        )
    elif callback_data.what_to_edit == 'product_contents':
        await call.message.edit_text(
            text='–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:',
            reply_markup=list_product_content(product_id=callback_data.product_id, page=0).as_markup()
        )
    elif callback_data.what_to_edit == 'display_status_of':
        db.update_display_status(product_id=callback_data.product_id, status='–≤—ã–∫–ª—é—á–µ–Ω')
        await call.message.edit_reply_markup(reply_markup=product_inf_kb(product_id=callback_data.product_id).as_markup())
        await call.answer(text='–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º!', show_alert=True)
    elif callback_data.what_to_edit == 'display_status_on':
        db.update_display_status(product_id=callback_data.product_id, status='–≤–∫–ª—é—á–µ–Ω')
        await call.message.edit_reply_markup(reply_markup=product_inf_kb(product_id=callback_data.product_id).as_markup()) 
        await call.answer(text='–°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º!', show_alert=True)  
    elif callback_data.what_to_edit == 'delete_product':
        await call.message.edit_text(
            text='–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!',
            reply_markup=delete_product_inf_product(product_id=callback_data.product_id).as_markup()
        )


@router.callback_query(ListPicturesInf.filter(F.action == 'open_picture_inf'))
async def open_picture_product_dv(call: types.CallbackQuery, callback_data: ListPicturesInf, state: FSMContext):

    photo = db.get_picture_product(picture_id=callback_data.picture_id)

    await call.message.delete()
    await call.message.answer_photo(photo=photo[0][3], reply_markup=picture_inf_kb(picture_id=callback_data.picture_id, product_id=callback_data.product_id).as_markup())


@router.callback_query(ListPicturesInf.filter(F.action == 'back_from_photo_inf'))
async def back_picture_product_dv(call: types.CallbackQuery, callback_data: ListPicturesInf, state: FSMContext):

    caption = '''
üì∏ <b>–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!</b>

üñºÔ∏è –Ø—Ä–∫–æ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ - —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ!
'''

    await call.message.delete()
    await call.message.answer(text=caption, reply_markup=edit_pictures_inf(product_id=callback_data.product_id).as_markup())


@router.callback_query(ListPicturesInf.filter(F.action == 'delete_picture_inf'))
async def delete_picture_product_dv(call: types.CallbackQuery, callback_data: ListPicturesInf, state: FSMContext):
    db.delete_picture_product(picture_id=callback_data.picture_id)

    list_pic = []
    for photo in db.get_list_pictures(product_id=callback_data.product_id):
        list_pic.append(photo[0])

    db.edit_product(product_id=callback_data.product_id, set='product_photo', new_data=list_pic)

    caption = '''
üì∏ <b>–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!</b>

üñºÔ∏è –Ø—Ä–∫–æ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ - —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ!
'''

    await call.message.delete()
    await call.message.answer(text=caption, reply_markup=edit_pictures_inf(product_id=callback_data.product_id).as_markup())
    await call.answer(text='üóë –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!')



@router.callback_query(ListPicturesInf.filter(F.action == 'add_picture_inf'))
async def add_picture_product_dv(call: types.CallbackQuery, callback_data: ListPicturesInf, state: FSMContext):

    await call.message.edit_text(
        text='–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ç–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞üòâ',
        reply_markup=cancel_add_picture_inf(product_id=callback_data.product_id).as_markup()
    )

    await state.set_state(Edit_Product_Inf.edit_product_inf)
    await state.update_data(what_to_edit='add_picture_inf')




@router.message(Edit_Product_Inf.edit_product_inf, or_f(
        F.photo,
        F.audio,
        F.text,
        F.document,
        F.video,
        F.voice
))
async def get_new_product_inf_data(msg: types.Message, state: FSMContext):
    getFSM = await state.get_data()

    if getFSM.get('what_to_edit') == 'add_picture_inf':
        try:
            picture_id = msg.photo[-1].file_id
            db.add_new_picture_product(product_id=getFSM.get('product_id'), picture_id=picture_id) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ

            list_pic = []
            for photo in db.get_list_pictures(product_id=getFSM.get('product_id')):
                list_pic.append(photo[0])

            db.edit_product(product_id=getFSM.get('product_id'), set='product_photo', new_data=list_pic)
        
            await msg.answer(text='‚úÖ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', reply_markup=return_list_picture_inf(product_id=getFSM.get('product_id')).as_markup())

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
            
            await state.clear()
        except:
            await msg.answer('–ö–∞–∂–µ—Ç—Å—è —Ç—ã –ø—Ä–∏—Å–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æüßê')
        
    elif getFSM.get('what_to_edit') == 'product_name':
        if len(msg.text) > 24:
            await msg.answer('–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=cancel_edit_product_inf(product_id=getFSM.get('product_id')).as_markup())
        else:
            db.edit_product(product_id=getFSM.get('product_id'),  set='product_name', new_data=msg.text)
            await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É',
                reply_markup=return_product_inf_kb(product_id=str(getFSM.get('product_id'))).as_markup()
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
        
            await state.clear()
    elif getFSM.get('what_to_edit') == 'product_description':
        if len(msg.text) > 1024:
            await msg.answer(text='–¢—ã –ø—Ä–∏—Å–ª–∞–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µüôÉ\n\n–ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=cancel_edit_product_inf(product_id=getFSM.get('product_id')).as_markup())
        else:
            db.edit_product(product_id=getFSM.get('product_id'),  set='product_description', new_data=msg.html_text)
            await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É',
                reply_markup=return_product_inf_kb(product_id=str(getFSM.get('product_id'))).as_markup()
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
            
            await state.clear()
    elif getFSM.get('what_to_edit') == 'product_quantity':
        if (msg.text.isdigit() and int(msg.text) > -1) and  (msg.text.isdigit() and int(msg.text) < 1000000):
            db.edit_product(product_id=getFSM.get('product_id'),  set='quantity', new_data=msg.text)
            await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É',
                reply_markup=return_product_inf_kb(product_id=str(getFSM.get('product_id'))).as_markup()
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
            
            await state.clear()
        else:
            await msg.answer('–ü—Ä–∏—à–ª–∏ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 999999', reply_markup=cancel_edit_product_inf(product_id=getFSM.get('product_id')).as_markup())
    elif getFSM.get('what_to_edit') == 'product_price':
        if msg.text.isdigit() and int(msg.text) > 0 and msg.text.isdigit() and int(msg.text) < 1000001: 
            db.edit_product(product_id=getFSM.get('product_id'),  set='price', new_data=msg.text)
            await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É',
                reply_markup=return_product_inf_kb(product_id=str(getFSM.get('product_id'))).as_markup()
            )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            if current_state is None:
                return
        
            await state.clear()
        else:
            await msg.answer('–ü—Ä–∏—à–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–µ–Ω—å—à–µ 1 RUB –∏ –Ω–µ –±–æ–ª—å—à–µ 1,000,000 RUB üòâ', reply_markup=cancel_edit_product_inf(product_id=getFSM.get('product_id')).as_markup())
    elif getFSM.get('what_to_edit') == 'product_discount':
        if (msg.text.isdigit() and int(msg.text) > -1) and  (msg.text.isdigit() and int(msg.text) < 100):
            product_data = db.get_product_data(product_id=getFSM.get('product_id'))

            total_price = product_data[0][6] - product_data[0][6] / 100 * int(msg.text)

            if round(total_price) == 0:
                db.edit_product(product_id=getFSM.get('product_id'), set='discount', new_data=msg.text)
                await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É', 
                reply_markup=return_product_inf_kb(product_id=getFSM.get('product_id')).as_markup()
            )
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                current_state = await state.get_state()

                if current_state is None:
                    return
        
                await state.clear()
            elif round(total_price) > 0:
                db.edit_product(product_id=getFSM.get('product_id'), set='discount', new_data=msg.text)
                await msg.answer(
                text='‚úÖ –ì–æ—Ç–æ–≤–æ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Ç–æ–≤–∞—Ä—É', 
                reply_markup=return_product_inf_kb(product_id=getFSM.get('product_id')).as_markup()
            )
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                current_state = await state.get_state()

                if current_state is None:
                    return
        
                await state.clear()
            else:
                await msg.answer(text='–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 üá∑üá∫RUB.', reply_markup=cancel_edit_product_inf(product_id=getFSM.get('product_id')).as_markup())
        else:
            await msg.answer(text='–ü—Ä–∏—à–ª–∏ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –æ—Ç 0 –¥–æ 99', reply_markup=cancel_edit_product_inf(product_id=getFSM.get('product_id')).as_markup())
    elif getFSM.get('what_to_edit') == 'product_content':

        if msg.content_type == types.ContentType.TEXT:
            content = msg.html_text
            content_type = 'text'
        elif msg.content_type == types.ContentType.PHOTO:
            content = msg.photo[-1].file_id
            content_type = 'photo'
        elif msg.content_type == types.ContentType.DOCUMENT:
            content = msg.document.file_id
            content_type = 'document'
        elif msg.content_type == types.ContentType.VOICE:
            content = msg.voice.file_id
            content_type = 'voice'
        elif msg.content_type == types.ContentType.VIDEO:
            content = msg.video.file_id
            content_type = 'video'

        # –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ —Ç–æ–≤–∞—Ä–µ

        db.add_product_content(product_id=getFSM.get('product_id'), content=content, product_type=content_type) # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
        content_id = db.get_last_product_content(product_id=getFSM.get('product_id'))[0][0] # –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        db.update_list_contents(product_id=getFSM.get('product_id'), contents_id=[content_id], quantity='no') # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Ç–æ–≤–∞—Ä–µ —Å –æ–¥–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º

        await msg.answer(
            text='–¢–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:',
            reply_markup=contetn_no_reusable_product_inf(product_id=getFSM.get('product_id')).as_markup()
        )




@router.callback_query(EditProductINF.filter(F.edit_product == 'delete_inf'))
async def delete_product_inf(call: types.CallbackQuery, callback_data: EditProductINF, state: FSMContext):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    delete_status = True

    for item in db.get_all_processing(project_id=project_id): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–ø–ª–∞—Ç—ã. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–ø–ª–∞—Ç—ã, —Ç–æ —É–¥–∞–ª–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
        if callback_data.product_id == str(item[7]):
            delete_status = False
            break


    if delete_status:
        for group in db.get_all_groups(project_id=project_id): # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
            if callback_data.product_id in group[6]: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–¥–∞–ª—è–µ–º—ã —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
                new_list = group[6]
                new_list.remove(f'{callback_data.product_id}') # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
                db.update_list_product_to_group(group_id=group[0], selected=new_list) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ

        db.delete_product(product_id=callback_data.product_id)

        await call.message.edit_text(
                text='üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!',
                reply_markup=return_list_products_inf().as_markup()
            )
    else:
        await call.answer(
                text='–¢–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –æ–ø–ª–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚è≥',
                show_alert=True
            )


    current_state = await state.get_state()

    if current_state is None:
        return
        
    await state.clear()