from aiogram import types, F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext


from Database.Admin_db import Database


from Keyboards.admin_keyboards.resources_keyboards import(
    list_resources,
    resource_kb,
    cancel_add_new_resource,
    ListResources,
    Paginator
)



db = Database()
router = Router()





@router.callback_query(F.data == 'resources')
async def call_resources(call: types.CallbackQuery):
    bot_username = await call.bot.get_me()

    caption = '''
<b>–î–æ–±–∞–≤–ª—è–π –∫–∞–Ω–∞–ª—ã, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å! ü§ë </b>

P.S.: <i>–ù–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å", —á—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –±—ã–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π! ‚ôªÔ∏è</i>
'''

    await call.message.edit_text(
        text=caption,
        reply_markup=list_resources(bot_username=bot_username.username, page=0).as_markup()
    )


# –ü–∞–≥–∏–Ω–∞—Ç–æ—Ä

@router.callback_query(Paginator.filter(F.array_name == 'resources'))
async def paginator_resources(call: types.CallbackQuery, callback_data: Paginator, state: FSMContext):
    bot_username = await call.bot.get_me()

    button = callback_data.button
    page = int(callback_data.page)
    max_pages = int(callback_data.max_pages)

    caption = '''
<b>–î–æ–±–∞–≤–ª—è–π –∫–∞–Ω–∞–ª—ã, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å! ü§ë </b>

P.S.: <i>–ù–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å", —á—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –±—ã–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π! ‚ôªÔ∏è</i>
'''

    if button == 'next':
        if page < max_pages-1:
            page += 1
            await call.message.edit_text(
                text=caption,
                reply_markup=list_resources(bot_username=bot_username.username, page=page).as_markup()
            )
        else:
            await call.answer(text='–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    else:
        if page > 0:
            page -= 1
            await call.message.edit_text(
                text=caption,
                reply_markup=list_resources(bot_username=bot_username.username, page=page).as_markup()
            )
        else:
            await call.answer(text='–≠—Ç–æ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    if current_state is None:
        return



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
class AddResource(StatesGroup):
    add_resource = State()


@router.callback_query(F.data == 'add_resource')
async def call_add_resource(call: types.CallbackQuery, state: FSMContext):
    bot_username = await call.bot.get_me()

    caption = f'''
–î–æ–±–∞–≤—å –±–æ—Ç–∞ @{bot_username.username} –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–∞–º–∏ "–î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤/–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏".

–ó–∞—Ç–µ–º –ø–µ—Ä–µ—à–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.
'''

    await call.message.edit_text(
        text=caption,
        reply_markup=cancel_add_new_resource().as_markup()
    )
    await call.answer(show_alert=True)
    await state.set_state(AddResource.add_resource)



@router.message(AddResource.add_resource)
async def get_data_channel(msg: types.Message, state: FSMContext):
    bot_username = await msg.bot.get_me()
    try:
        channel_id = msg.forward_from_chat.id
        name_channel = msg.forward_from_chat.full_name
        
        status = await msg.bot.get_chat_member(chat_id=channel_id, user_id=msg.bot.id)
        if status.can_invite_users:
            if db.check_resource(channel_id=channel_id, bot_username=bot_username.username) == []:
                db.add_resourse(
                    project_id=db.get_project_id(bot_username=bot_username.username),
                    channel_name=name_channel,
                    channel_id=channel_id
                )

                caption = '''
–î–æ–±–∞–≤–ª—è–π –∫–∞–Ω–∞–ª—ã, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å! ü§ë 

P.S.: –ù–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å", —á—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –±—ã–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π! ‚ôªÔ∏è
'''

                await msg.answer(
                    text=caption,
                    reply_markup=list_resources(bot_username=bot_username.username, page=0).as_markup()
                )

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 
                current_state = await state.get_state()
                if current_state is None:
                    return

                await state.clear()
            else:
                await msg.answer('–î–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—ÇüòÑ', reply_markup=cancel_add_new_resource().as_markup())
        else:
            caption = '''
–£–ø—Å, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –ø—Ä–∞–≤!  ü§î  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –±–æ—Ç—É –¥–æ—Å—Ç—É–ø –∫ "–î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤/–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏"  –∏ –ø–µ—Ä–µ—à–ª–∏ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ –µ—â–µ —Ä–∞–∑. 
'''

            await msg.answer(text=caption, reply_markup=cancel_add_new_resource().as_markup())
    except:
        caption = '''
–ü–æ—Ö–æ–∂–µ, —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòï  –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞, –≥–¥–µ —Ç—ã –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã,  –∏–ª–∏ –Ω–∞–∂–º–∏ "–û—Ç–º–µ–Ω–∞".
'''

        await msg.answer(text=caption, reply_markup=cancel_add_new_resource().as_markup())
    

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å

@router.callback_query(ListResources.filter(F.action == 'open_resource'))
async def get_data_source(call: types.CallbackQuery, callback_data: ListResources):
    resource_data = db.get_data_resources(resource_id=callback_data.resource_id)
    
    await call.message.edit_text(
        text=f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b> {resource_data[0][2]}\n<b>ID –ø—Ä–æ–µ–∫—Ç–∞:</b> {resource_data[0][1]}',
        reply_markup=resource_kb(resource_id=callback_data.resource_id).as_markup()
    )


# –£–¥–∞–ª—è–µ–º —Ä–µ—Å—É—Ä—Å

@router.callback_query(ListResources.filter(F.action == 'delete_resource'))
async def call_delete_resource(call: types.CallbackQuery, callback_data: ListResources):
    bot_username = await call.bot.get_me()
    project_id = db.get_project_id(bot_username=bot_username.username)

    black_list = ''

    for item in db.get_list_content_ch_product(project_id=project_id): # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –∫ –æ–¥–Ω–æ–º—É –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
        if callback_data.resource_id in item[0]:
            black_list += f'\n- {item[1]}'

    if len(black_list) > 1:
        await call.answer(
            text=f'–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–æ–≤–∞—Ä–∞–ºüôÉ',
            show_alert=True
        )
    else:
        db.delete_resource(resource_id=callback_data.resource_id)

        caption = '''
<b>–î–æ–±–∞–≤–ª—è–π –∫–∞–Ω–∞–ª—ã, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å! ü§ë </b>

P.S.: <i>–ù–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å", —á—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ –±—ã–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π! ‚ôªÔ∏è</i>
'''

        await call.message.edit_text(
            text=caption,
            reply_markup=list_resources(bot_username=bot_username.username, page=0).as_markup()
        )
        await call.answer(text='üóë –†–µ—Å—É—Ä—Å —É–¥–∞–ª–µ–Ω!', show_alert=True)
        





# –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–æ—Ä–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–æ–µ–Ω—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ  –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ

@router.callback_query(F.data == 'udpdate_data_resources')
async def call_udpdate_data_resources(call: types.CallbackQuery):
    bot_username = await call.bot.get_me()

    try:
        for resource in db.get_list_resources(bot_username=bot_username.username):
            status_resource = await call.bot.get_chat(chat_id=resource[3])

            if status_resource.full_name != resource[2]:
                db.update_data_resource(channel_id=resource[3], new_name=status_resource.full_name)
    except:
        pass
            
            
    await call.answer(text='‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', show_alert=True)